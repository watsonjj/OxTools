//
// Created by Jason Watson on 10/09/15.
//

/* TODO ideas:
 * put all pixels with event number into histogram, then extract from histogram
 * OR each branch is an array of 2048
 * separate timeslice ttree, each branch is an event
 * OR timeslices are included through an extra dimension on the array
 * array of branch_values
 * branch_values of other types??? (maybe not needed)
 * option to print list of branches
 * difference between corsika event, and event index, which should user call? which should display?
 * make seperate plotter for timeslices?
 * change  Entry::s_max_event to be a oxtool-set id, to avoid missing
*/

#include <camera_image_plotter.h>

void camera_image_plotter(Filepaths filepaths, string branch_name,
                          uint32_t camera_requested,
                          uint32_t event_requested,
                          bool all_events, bool save_images) {

	Print::FunctionStart();

	//Select required branches
	vector<string> branch_vector = {branch_name};

	//Build run
	Run run0(filepaths.GetInput(), branch_vector);

	// Create canvas
	cout << Print::Level() << "[canvas] Creating canvas" << endl;
	TCanvas *Cc1 = new TCanvas("Cc1", "Cc1", 1000, 1000);
	TPad *Ppad1 = (TPad *) Cc1->GetPad(0);
	Ppad1->SetRightMargin(0.15);

	// Check we are not out of range
	if (event_requested >= run0.GetNumEvents()) {
		throw std::invalid_argument("[event][error] Requested event out of range");
	}
	if (camera_requested >= run0.GetNumCameras()) {
		throw std::invalid_argument("[camera][error] Requested camera out of range");
	}

	//Loop over cameras
	for (auto camera_pair : run0.GetCameraMap()) {
		auto camera = camera_pair.second;
		uint32_t current_camera = camera.GetCameraId();
		if (!all_events && current_camera != camera_requested) continue;

		// Create Histograms
		cout << Print::Level() << "[TH2] Creating camera_image histograms" << endl;
		TH2F *Hhist0 = base_TH2F_builder(camera);
		TH2F *Hcamera_image = (TH2F *) Hhist0->Clone("Hcamera_image");
		TH2F *Hcamera_pixels = (TH2F *) Hhist0->Clone("Hcamera_pixels");

		// Setup Histograms
		Hcamera_image->SetTitle("Camera Image");
		Hcamera_image->GetZaxis()->SetTitle(branch_name.c_str());
		if (all_events) {
			Hcamera_image->GetZaxis()->SetRangeUser(run0.GetBranchMinPositive(branch_name),
					  run0.GetBranchMax(branch_name));
		}
		else {
			Hcamera_image->GetZaxis()->SetRangeUser(
					  camera.GetEvent(event_requested)->GetBranchMinMax(branch_name).first,
					  camera.GetEvent(event_requested)->GetBranchMinMax(branch_name).second);
		}
		Hcamera_pixels->SetTitle("Camera Pixels");
		Hcamera_pixels->SetMarkerSize(0.3);

		// Create Pixel Outlines
		vector<TLine *> line_vector = pixel_outlines(camera.GetPixelMap());

		// Set up output gif for all_events
		if (all_events) {
			filepaths.BuildOutput(".gif", "", "", "camera", branch_name);
			fs::remove(filepaths.GetOutput()); // delete previous gif
		}

		// Loop over events
		Progress progress(run0.GetNumEvents());
		int progress_i = 0;
		if (all_events)
			cout << Print::Level() << "[TH2] Filling histograms with " << branch_name << endl;
		Print::LevelIncrease();
		for (auto event_it_pair : camera.GetEventMap()) {
			auto event_it = event_it_pair.second;
			uint32_t current_event = event_it.GetEventIndex();
			if (!all_events && current_event != event_requested) continue;

			progress_i++;
			if (!all_events)
				cout << Print::Level() << "[TH2] Filling histograms with " << branch_name
				<< " for event " << event_it.GetEventIndex() << endl;
			else progress.Print(progress_i);

			for (auto entry_it_pair : event_it.GetPixelEntryMap()) {
				auto entry_it = entry_it_pair.second;
				//Fill histogram with values
				int pixel = entry_it.GetPixel();
				int row = camera.GetRow(pixel);
				int column = camera.GetColumn(pixel);
				float bin_content = entry_it.GetBranchValue(branch_name);
				Hcamera_image->SetBinContent(column + 1, row + 1, bin_content);
				Hcamera_pixels->SetBinContent(column + 1, row + 1, pixel);
			}

			// Obtain filepath information
			filepaths.BuildOutput(".pdf", std::to_string(event_it.GetEventIndex()), "",
			                      "camera", branch_name);
			if (all_events)
				//TODO: Change how output filepath made. Insert camera_id information
				filepaths.BuildOutput(".gif+30", "", "", "camera", branch_name);
			if (save_images)
				filepaths.CreateOutputDirectory();

			//Draw histograms
			Hcamera_image->Draw("colz");
			Hcamera_pixels->Draw("same text");
			for (TLine *line : line_vector) {
				line->Draw("same");
			}
			Hcamera_image->SetTitle(Form("[IMAGE] Camera [RUN] %s [CAMERA] %d [EVENT] %d",
			                             filepaths.GetRun().c_str(), camera.GetCameraId(),
			                             event_it.GetEventIndex()));

			// Save image
			if (save_images)
				Cc1->SaveAs(filepaths.GetOutput().c_str());
		}
	}
	Print::LevelDecrease();
	if (all_events) {
		filepaths.BuildOutput(".gif++60++", "", "", "camera", branch_name);
		Cc1->SaveAs(filepaths.GetOutput().c_str());
	}
	Print::FunctionEnd();
	Entry::ResetStatic();
}

TH2F* base_TH2F_builder(Camera camera0) {

	int num_rows = camera0.GetNumRows();
	int num_columns = camera0.GetNumColumns();

	//Set up base histogram
	TH2F *Hhist0 = new TH2F("base_histogram", "Base Histogram", num_columns, 0,
	                        num_columns, num_rows, 0, num_rows);
	Hhist0->GetXaxis()->SetLabelSize(0);
	Hhist0->GetXaxis()->SetTickLength(0);
	Hhist0->GetYaxis()->SetLabelSize(0);
	Hhist0->GetYaxis()->SetTickLength(0);
	Hhist0->SetStats(0);
	Hhist0->GetZaxis()->SetLabelSize(0.03);
	Hhist0->GetZaxis()->SetTitleOffset(1.2);

	// Define gradient color palette
	const Int_t NRGBs = 5;
	const Int_t NCont = 255;
	Double_t stops[NRGBs] = {0.00, 0.34, 0.61, 0.84, 1.00};
	Double_t red[NRGBs] = {0.00, 0.00, 0.87, 1.00, 0.51};
	Double_t green[NRGBs] = {0.00, 0.81, 1.00, 0.20, 0.00};
	Double_t blue[NRGBs] = {0.51, 1.00, 0.12, 0.00, 0.00};
	TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
	gStyle->SetNumberContours(NCont);

	return Hhist0;
}



vector<TLine*> pixel_outlines(map<int,Pixel> pixel_map) {
	cout << Print::Level() << "[TH2] Creating pixel outlines for camera histogram" << endl;
	int row, column;
	TLine *line1, *line2, *line3, *line4;
	std::vector<TLine *> line_vector;
	for (auto pixel_it_pair : pixel_map) {
		auto pixel_it = pixel_it_pair.second;
		if (pixel_it.m_pixel != -1) {
			row = pixel_it.m_row;
			column = pixel_it.m_column;
			line1 = new TLine(column, row, column, row + 1);
			line2 = new TLine(column, row, column + 1, row);
			line3 = new TLine(column + 1, row, column + 1, row + 1);
			line4 = new TLine(column, row + 1, column + 1, row + 1);
			if ((row + 1) % 8 == 0) { //TODO Hardcoded - make general
				line4->SetLineColor(2);
				line4->SetLineWidth(3);
			}
			if (row % 8 == 0) { //TODO Hardcoded - make general
				line2->SetLineColor(2);
				line2->SetLineWidth(3);
			}
			if ((column + 1) % 8 == 0) { //TODO Hardcoded - make general
				line3->SetLineColor(2);
				line3->SetLineWidth(3);
			}
			if (column % 8 == 0) { //TODO Hardcoded - make general
				line1->SetLineColor(2);
				line1->SetLineWidth(3);
			}
			line_vector.push_back(line1);
			line_vector.push_back(line2);
			line_vector.push_back(line3);
			line_vector.push_back(line4);
		}
		else {
			cout << "[DEBUG] Pixel id == -1" << endl;
		}
	}
	return line_vector;
}