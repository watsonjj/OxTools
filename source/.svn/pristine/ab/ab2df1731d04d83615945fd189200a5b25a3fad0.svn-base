//
// Created by Jason Watson on 30/09/15.
//

#include <Filepaths.h>
#include <charge_resolution_plotter.h>
#include "oxtools_ttree_converter.h"


// TODO: option to list possible branches (automatically if branch empty/does not match a possibility)

int main(int argc, char *argv[]) {
	START();
	string help_message = Form(
			  "%s [-f {input_filepaths}] [OPTIONS] \n"
						 "  -- program to plot camera image from a TTree                                 \n\n"
						 "Options:        Arguments:        Description:                                 \n"
						 " -h | --help                       show the help text                          \n"
						 " -f              [input_filepaths] path to the input root file (or txt file,   \n"
						 "                                     which will be converted)                  \n"
						 "                                     multiple arugments and wildcards are      \n"
						 "                                     accepted                                  \n"
					    " -s              [output_name]     save a png for this event                   \n"
					    "                                     (does not display graphics)               \n"
					    " -m              [max true charge] maximum number of photoelectrons explored   \n"
					    "                                     for the true charge (default=1000)        \n",
			  argv[0]);

	// Define variables;
	set<fs::path> input_filepath_set;
	bool save_images = false;
	string output_filename = "Charge_Resolution";
	uint32_t max_npe = 1000;

	// Check for required arguments
	bool input_filepath_f = false;

	for (int i = 1; i < argc; i++) {
		if (strcmp(argv[i], "-h") == 0 || strcmp(argv[i], "--help") == 0) {
			std::cout << help_message << endl;
			return 1;
		}
		if (strcmp(argv[i], "-f") == 0) {
			while(i+1 < argc && string(argv[i + 1]).find("-") != 0) {
				input_filepath_set.insert(argv[i + 1]);
				input_filepath_f = true;
				i++;
			}
		}
		if (strcmp(argv[i], "-s") == 0) {
			save_images = true;
			output_filename = "charge_resolution";
			if (i + 1 != argc && string(argv[i + 1]).find("-") != 0) {
				output_filename = argv[i + 1];
			}
		}
		if (strcmp(argv[i], "-m") == 0) {
			if (i + 1 != argc && string(argv[i + 1]).find("-") != 0) {
				max_npe = (uint32_t) atoi(argv[i + 1]);
			}
		}
	}

	// Required options
	if (!input_filepath_f) {
		std::cout << Print::Level() <<
		"[arg][error] Required argument not specified: [input_filepaths]" << endl;
		std::cout << help_message << endl;
		return 1;
	}

	set<fs::path> input_rootfile_set;
	if (input_filepath_set.size() > 1) {
		std::cout << Print::Level() << "[file] Looping over files" << endl;
		Print::LevelIncrease();
	}
	for (fs::path path : input_filepath_set) {
		Filepaths filepaths(path);
		// Run command
		//Convert from txt to root
		if (!filepaths.IsOx()) {
			std::cout << Print::Level() << "[file] Converting file to .ox.root file" << endl;
			oxtools_ttree_converter(filepaths);
			input_rootfile_set.insert(filepaths.GetOutput());
		}
		else {
			input_rootfile_set.insert(filepaths.GetInput());
		}
	}
	if (input_filepath_set.size() > 1) {
		Print::LevelDecrease();
	}

	if (!save_images) {
		TApplication *rootapp = new TApplication("example", 0, 0);
		charge_resolution_plotter(input_rootfile_set, save_images, output_filename, max_npe);
		gPad->Update();
		rootapp->Run();
	}
	else {
		charge_resolution_plotter(input_rootfile_set, save_images, output_filename, max_npe);
	}

	END();
	return 0;
}

