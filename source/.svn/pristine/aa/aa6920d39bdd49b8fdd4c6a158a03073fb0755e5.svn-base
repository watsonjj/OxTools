//
// Created by Jason Watson on 02/11/15.
//

/*
 * 2nd level of the OxTools entry structure.
 *
 * Typically it is unnecessary to initialise this object manually, as it is automatically created
 * when initialising a Run object.
 *
 * Holds the Event and Pixel Objects.
 *
 * OxTools entry structure:
 * RUN1
 *  |-------------------------------|
 * CAMERA1                      CAMERA2...(xNumCamerasInArray)
 *  |   |-------------------|
 *  |  PIXEL1            PIXEL2...(x2048 pixels)
 *  |---------------|
 *  EVENT1         EVENT2...(xNumEventTriggersForCamera)
 *     |--------|
 *   ENTRY1   ENTRY2...(x2048 pixels)
 */

#ifndef OXTOOLS_CAMERA_H
#define OXTOOLS_CAMERA_H

#include <initialise.h>
#include <Event.h>
#include <Pixel.h>

class Run;

typedef map<uint32_t, Event> map_uint32_t_Event_t;
typedef map<int, Pixel> map_int_Pixel_t;

class Camera {
	 friend class Run;
private:
	 Camera(Run* run) : pRun(run) { Init();};

	 Run* pRun;  // Parent class
	 int mCameraId;
	 uint32_t mNumEvents;
	 int mNumPixels;
	 int mNumRows;
	 int mNumColumns;
	 int mNumModules;
	 int mNumModulePixels;
	 map<uint32_t,Event> mEventMap; // Container of the next level of the OxTool structure
	 map<int,Pixel> mPixelMap; // Container of the next level of the OxTool structure
	 TH2F* mBaseCameraTH2F;
	 vector<TLine*> mPixelOutlineVector;
	 TH2F* mPixelIdTH2F;

	 double mMin_y;
	 double mMin2_y;
	 double mMin_x;
	 double mMin2_x;
	 double mMax_y;
	 double mMax_x;

	 void Init();
	 void AddEventEntry(const Entry &entry_holder);
	 void AddPixelEntry(const Pixel &pixel_holder);

public:
	 GET(Run, pRun, Run*);
	 GET(CameraId, mCameraId, int);
	 GET(NumEvents, mNumEvents, uint32_t);
	 GET(NumPixels, mNumPixels, int);
	 GET(NumRows, mNumRows, int);
	 GET(NumColumns, mNumColumns, int);
	 GET(NumModules, mNumModules, int);
	 GET(NumModulePixels, mNumModulePixels, int);
	 GETREF(EventMap, mEventMap, map_uint32_t_Event_t);
	 GETREF(PixelMap, mPixelMap, map_int_Pixel_t);
	 GETMAPCONTENTREF(Event, mEventMap, Event, int);
	 GETMAPCONTENTREF(Pixel, mPixelMap, Pixel, int);

	 TH2F* GetBaseCameraTH2F();
	 void DrawPixelOutline();
	 TH2F* GetPixelIdTH2F();
	 void PlotMarker(double X, double Y);
	 set<int> GetNeighbouringPixels(int pixel_id);
};

#endif //OXTOOLS_CAMERA_H

