//
// Created by Jason Watson on 10/09/15.
//

/* TODO ideas:
 * option to print list of branches
*/

#include <camera_image_plotter.h>

void camera_image_plotter(Filepaths &filepaths, string branch_name,
                          uint32_t event_requested,
                          bool all_events, bool save_images) {

	START();

	//Select required branches
	const vector<string> branch_vector = {branch_name};

	//Build run
	Run run0(filepaths.GetInput(), branch_vector);

	// Check we are not out of range
	if (event_requested > run0.GetMaxEventNum()) {
		throw std::invalid_argument("[event][error] Requested event out of range");
	}

	// Set up output
	filepaths.BuildOutput(filepaths.GetRunIdentifier(),
	                      filepaths.GetRunIdentifier()
	                      + "_" + branch_name + "_image", ".gif");
	if (all_events) fs::remove(filepaths.GetOutput()); // delete previous gif
	if (save_images) filepaths.CreateOutputDirectory();

	//Loop over cameras to get module outlines and create base histograms
	map<int,TH2F*> Hhist0_map;
	map<int, vector<TLine *>> line_vector_map;
	float branch_min = run0.GetBranchMin(branch_name);
	float branch_max = run0.GetBranchMax(branch_name);
	int num_cameras = 0;
	map<int,int> camera_index;
//	if (!all_events) {
//		branch_min = run0.GetEventBranchMin(event_requested,branch_name);
//		branch_max = run0.GetEventBranchMax(event_requested,branch_name);
//	}
	for (const auto &camera_pair : run0.GetCameraMap()) {
		const auto &camera = camera_pair.second;
		int current_camera = camera.GetCameraId();
		if (!all_events) {
			if (!run0.CheckEventExists(current_camera, event_requested)) continue;
		}
		camera_index[current_camera] = ++num_cameras;

		// Lines
		line_vector_map[current_camera] = pixel_outlines(camera);

		// Create Histograms
		Hhist0_map[current_camera] = base_TH2F_builder(camera);
		Hhist0_map[current_camera]->GetZaxis()->SetTitle(branch_name.c_str());
	}

	// Print setup
	COUTP("[branch] " << branch_name);
	COUTP("[camera][loop] " << num_cameras);
	if (all_events) COUTP("[events][loop] " << run0.GetMaxEventNum()+1);
	else COUTP("[event] " << event_requested);

	// Create canvas
	TCanvas* canvas;
	TPad* pad;
	canvas = new TCanvas(Form("Camera"), "Camera Canvas", 3000, 2000);
	canvas->Divide(int(ceil(sqrt(num_cameras))), int(ceil(sqrt(num_cameras))));
	pad = (TPad *) canvas->GetPad(0);
	pad->SetRightMargin(0.2);

	//Loop over event numbers
	uint32_t num_events = run0.GetMaxEventNum()+1;
//	uint32_t num_events = 10;
	Progress progress(num_events, "Looping over events : ");
	int progress_i = 0;
	Print::LevelIncrease();

	for (uint32_t current_event = 0; current_event < num_events; current_event++) {
		if (!all_events && current_event != event_requested) continue;
		progress.Print(current_event);

		//Loop over cameras
		Print::LevelIncrease();
		for (const auto &camera_pair : run0.GetCameraMap()) {
			const auto &camera = camera_pair.second;
			int current_camera = camera.GetCameraId();

			canvas->cd(camera_index[current_camera]);

			if (!run0.CheckEventExists(current_camera, current_event) && !all_events) continue;
			// Get copy of histogram
			TH2F *Hcamera_image = (TH2F *) Hhist0_map[current_camera]->Clone("Hcamera_image");
			TH2F *Hcamera_pixels = (TH2F *) Hhist0_map[current_camera]->Clone("Hcamera_pixels");

			//Fill histogram with values
			if (run0.CheckEventExists(current_camera, current_event)) {
				const Event &event = camera.GetEvent(current_event);
				branch_min = run0.GetEventBranchMin(current_event,branch_name);
				branch_max = run0.GetEventBranchMax(current_event,branch_name);
				for (const auto &entry_pair : event.GetEntryMap()) {
					const auto &entry = entry_pair.second;
					int pixel = entry.GetPixel();
					int row = camera.GetPixel(pixel).GetRow();
					int column = camera.GetPixel(pixel).GetColumn();
					float bin_content = entry.GetBranchValue(branch_name);
					Hcamera_image->SetBinContent(column + 1, row + 1, bin_content);
					Hcamera_pixels->SetBinContent(column + 1, row + 1, pixel);
				}
			}


			//Draw histograms
			Hcamera_image->GetZaxis()->SetRangeUser(branch_min,branch_max);
			Hcamera_image->Draw("colz");
			Hcamera_pixels->GetZaxis()->SetRangeUser(0,camera.GetNumPixels());
			Hcamera_pixels->Draw("same text");
			for (TLine *line : line_vector_map[current_camera]) {
				line->Draw("same");
			}
			Hcamera_image->SetTitle(Form("[IMAGE] Camera [RUN] %s [CAMERA] %d [EVENT] %d",
			                             filepaths.GetRunIdentifier().c_str(), current_camera,
			                             current_event));
		}
		Print::LevelDecrease();
		gPad->Update();
		// Save to file
		if (save_images) {
			filepaths.BuildOutput(filepaths.GetRunIdentifier(),
			                      filepaths.GetRunIdentifier()
			                      + "_e" + std::to_string(current_event)
			                      + "_" + branch_name + "_image", ".png");
			if (all_events && current_event<num_events-1)
				filepaths.BuildOutput(filepaths.GetRunIdentifier(),
				                      filepaths.GetRunIdentifier()
				                      + "_" + branch_name + "_image", ".gif+300");
			else if (all_events) {
				filepaths.BuildOutput(filepaths.GetRunIdentifier(),
				                      filepaths.GetRunIdentifier()
				                      + "_" + branch_name + "_image", ".gif++600++");
				std::cout << "[file][output] " << filepaths.GetOutput() << std::endl;
			}
			canvas->SaveAs(filepaths.GetOutput().c_str());
			canvas->Clear("D");
		}
	}
	Print::LevelDecrease();
	END();
}

TH2F* base_TH2F_builder(const Camera &camera) {
	int num_rows = camera.GetNumRows();
	int num_columns = camera.GetNumColumns();

	//Set up base histogram
	TH2F *Hhist0 = new TH2F(Form("base_histogram%d",camera.GetCameraId()),
	                        "Base Histogram", num_columns, 0,
	                        num_columns, num_rows, 0, num_rows);
	Hhist0->GetXaxis()->SetLabelSize(0);
	Hhist0->GetXaxis()->SetTickLength(0);
	Hhist0->GetYaxis()->SetLabelSize(0);
	Hhist0->GetYaxis()->SetTickLength(0);
	Hhist0->SetStats(0);
	Hhist0->GetZaxis()->SetLabelSize(0.03);
	Hhist0->GetZaxis()->SetTitleOffset(1.3);
	Hhist0->SetMarkerSize(0.5);
	Hhist0->SetMarkerColor(kWhite);

	// Define gradient color palette
	const Int_t NRGBs = 5;
	const Int_t NCont = 255;
	Double_t stops[NRGBs] = {0.00, 0.34, 0.61, 0.84, 1.00};
	Double_t red[NRGBs] = {0.00, 0.00, 0.87, 1.00, 0.51};
	Double_t green[NRGBs] = {0.00, 0.81, 1.00, 0.20, 0.00};
	Double_t blue[NRGBs] = {0.51, 1.00, 0.12, 0.00, 0.00};
	TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
	gStyle->SetNumberContours(NCont);

	return Hhist0;
}

vector<TLine *> pixel_outlines(const Camera &camera) {
	int row, column;
	TLine *line1, *line2, *line3, *line4;
	std::vector<TLine *> line_vector;
	int sqrt_modulepixel = (int) sqrt(camera.GetNumModulePixels());
	if (sqrt_modulepixel != 8) cout << "[DEBUG] sqrt_modulepixel != 8" << endl;
	for (const auto &pixel_it_pair : camera.GetPixelMap()) {
		const auto &pixel = pixel_it_pair.second;
		if (pixel.GetPixelId() != -1) {
			row = pixel.GetRow();
			column = pixel.GetColumn();
			line1 = new TLine(column, row, column, row + 1);
			line2 = new TLine(column, row, column + 1, row);
			line3 = new TLine(column + 1, row, column + 1, row + 1);
			line4 = new TLine(column, row + 1, column + 1, row + 1);
			if ((row + 1) % sqrt_modulepixel == 0) {
				line4->SetLineColor(2);
				line4->SetLineWidth(3);
			}
			if (row % sqrt_modulepixel == 0) {
				line2->SetLineColor(2);
				line2->SetLineWidth(3);
			}
			if ((column + 1) % sqrt_modulepixel == 0) {
				line3->SetLineColor(2);
				line3->SetLineWidth(3);
			}
			if (column % sqrt_modulepixel == 0) {
				line1->SetLineColor(2);
				line1->SetLineWidth(3);
			}
			line_vector.push_back(line1);
			line_vector.push_back(line2);
			line_vector.push_back(line3);
			line_vector.push_back(line4);
		}
		else {
			cout << "[DEBUG] Pixel id == -1" << endl;
		}
	}
	return line_vector;
}

