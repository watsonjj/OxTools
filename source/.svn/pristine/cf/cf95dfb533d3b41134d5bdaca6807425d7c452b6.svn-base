//
// Created by Jason Watson on 08/04/2016.
//

#include "PulseSpectrumFit.h"

double_t pedestalFunction(Double_t *x, Double_t *par) {
	return par[0] * (ROOT::Math::normal_pdf(x[0], par[2], par[1]));
}

double_t risingedgeFunction(Double_t *x, Double_t *par) {
	return (par[3] * // scaling parameter
	        (ROOT::Math::normal_pdf(x[0], ((sqrt(1)) * par[5]),
	                                (1 * par[4])))); // normal dist for dynodes
}

double_t pbnFunction(Double_t *x, Double_t *par, uint i, uint k) {
	return (par[3] * // scaling parameter
	        (ROOT::Math::poisson_pdf(i, par[6])) *// poisson distribution of incoming photons
	        (ROOT::Math::binomial_pdf(k, par[7], i)) * // binomial for quantum efficiency
	        (ROOT::Math::normal_pdf(x[0], ((sqrt(k)) * par[5]),
	                                (k * par[4])))); // normal dist for dynodes
}

double_t pbnNSBFunction(Double_t *x, Double_t *par, uint i, uint k) {
	return (par[3] * // scaling parameter
	        (ROOT::Math::poisson_pdf(i, par[8])) *// poisson distribution of incoming photons
	        (ROOT::Math::binomial_pdf(k, par[7], i)) * // binomial for quantum efficiency
	        (ROOT::Math::normal_pdf(x[0], ((sqrt(k)) * par[5]),
	                                (k * par[4])))); // normal dist for dynodes
}

double_t pedrisingFunction(Double_t *x, Double_t *par) {
	double_t xtotal = pedestalFunction(x, par); // pedestal
	xtotal += risingedgeFunction(x, par); //rising edge
	return xtotal;
}

double_t lowPEFunction(Double_t *x, Double_t *par, int maxPhotons) {
	double_t xtotal = pedestalFunction(x, par); // pedestal
	for (uint i = 1; i <= maxPhotons; ++i) {
		for (uint k = i; k > 0; k--) {
			xtotal += pbnFunction(x, par, i, k);
		}
	}
	return xtotal;
}

double_t lowPENSBFunction(Double_t *x, Double_t *par, int maxPhotons) {
	double_t xtotal = pedestalFunction(x, par); // pedestal
	for (uint i = 1; i <= maxPhotons; ++i) {
		for (uint k = i; k > 0; k--) {
			xtotal += pbnFunction(x, par, i, k);
			xtotal += pbnNSBFunction(x, par, i, k);
		}
	}
	return xtotal;
}

void PulseSpectrumFit::Init() {
	mXmin = mSpectrum->GetXaxis()->GetXmin();
	mXmax = mSpectrum->GetXaxis()->GetXmax();
	mMaxPhotons = 20; // TODO: change to user specified
	mPedRisingEdgeFit = nullptr;
	mLowPEFit = nullptr;
	memset(mPedRisingEdgePar, 0, sizeof mPedRisingEdgePar);
	memset(mLowPEPar, 0, sizeof mLowPEPar);
	mPEMap.clear();
}

void PulseSpectrumFit::FitPedRisingEdge() {
	mPedRisingEdgeFit = new TF1("pedrisingFit", pedrisingFunction, mXmin, 60, 6);
	mPedRisingEdgeFit->SetParameter(0, 2E5); // Pedestal Scale
	mPedRisingEdgeFit->FixParameter(1, 0);   // Pedestal Mean
	mPedRisingEdgeFit->SetParameter(2, 10);  // Pedestal stddev
	mPedRisingEdgeFit->SetParameter(3, 2E5); // Normal Scale
	mPedRisingEdgeFit->SetParameter(4, 45);  // Normal Mean
	mPedRisingEdgeFit->SetParameter(5, 20);  // Normal stddev
	mSpectrum->Fit("pedrisingFit", "0");
	mPedRisingEdgeFit->GetParameters(mPedRisingEdgePar);
}

void PulseSpectrumFit::FitLowPE() {
	FitPedRisingEdge();
	auto lowPELambda = [this](Double_t *x, Double_t *par) {
		 return lowPEFunction(x, par, mMaxPhotons);
	};
	mLowPEFit = new TF1("lowPEFit", lowPELambda, mXmin, mXmax, 9);
	mLowPEFit->SetParameter(0, mPedRisingEdgePar[0]); // Pedestal scale
	mLowPEFit->FixParameter(1, mPedRisingEdgePar[1]); // Pedestal mean
	mLowPEFit->SetParameter(2, mPedRisingEdgePar[2]); // Pedestal stddev
	mLowPEFit->SetParameter(3, mPedRisingEdgePar[3]); // Scale
	mLowPEFit->SetParameter(4, mPedRisingEdgePar[4]); // Gaussian mean
	mLowPEFit->SetParameter(5, mPedRisingEdgePar[5]); // Gaussian stddev
	mLowPEFit->SetParameter(6, 3);                    // Lambda (Poisson mean)
	mLowPEFit->FixParameter(7, 0.35);                 // Quantum Efficiency
	mLowPEFit->FixParameter(8, 0);                    // NSB rate
	mSpectrum->Fit("lowPEFit", "0");
	mLowPEFit->GetParameters(mLowPEPar);

	mPEMap.clear();
	for (uint k=1; k <= mMaxPhotons; k++) {
		auto pbnLambda = [k, this](Double_t *x, Double_t *par) {
			 double_t xtotal = 0;
			 for (uint i = 1; i <= mMaxPhotons; ++i) {
				 xtotal += pbnFunction(x, par, i, k); // normal dist for dynodes
			 }
			 return xtotal;
		};
		TF1 *gaussian = new TF1("gaussian", pbnLambda, mXmin, mXmax, 9);
		gaussian->SetParameters(mLowPEPar);
		mPEMap[k] = gaussian;
	}
	TF1 *pedestal = new TF1("pedestal", pedestalFunction, mXmin, mXmax, 9);
	pedestal->SetParameters(mLowPEPar);
	mPEMap[0] = pedestal;
}

void PulseSpectrumFit::DrawPedRisingEdge(fs::path output) {
	TCanvas *canvas = new TCanvas("cPedRisingEdge", "cPedRisingEdge", 3000, 2000);
	mSpectrum->Draw("E");

	TF1 *pedestal = new TF1("pedestal", pedestalFunction, mXmin, mXmax, 6);
	pedestal->SetParameters(mPedRisingEdgePar);
	pedestal->SetNpx(500);
	pedestal->SetLineWidth(2);
	pedestal->SetLineColor(kRed);
	pedestal->Draw("same");

	TF1 *risingedge = new TF1("risingedge", risingedgeFunction, mXmin, mXmax, 6);
	risingedge->SetParameters(mPedRisingEdgePar);
	risingedge->SetNpx(500);
	risingedge->SetLineWidth(2);
	risingedge->SetLineColor(kBlue);
	risingedge->Draw("same");

	mPedRisingEdgeFit->SetNpx(500);
	mPedRisingEdgeFit->SetLineWidth(2);
	mPedRisingEdgeFit->SetLineColor(kMagenta);
	mPedRisingEdgeFit->Draw("same");

	if (boost::filesystem::create_directories(output.parent_path()))
		COUTP("[directory][new] " << output);
	canvas->SaveAs(output.c_str());
	COUTP("[file][output] " << output);
}

void PulseSpectrumFit::DrawLowPE(fs::path output) {
	TCanvas *canvas = new TCanvas("cLowPE", "cLowPE", 3000, 2000);
	mSpectrum->Draw("E");

	TF1 *pedestal = new TF1("pedestal", pedestalFunction, mXmin, mXmax, 9);
	pedestal->SetParameters(mLowPEPar);
	pedestal->SetNpx(500);
	pedestal->SetLineWidth(2);
	pedestal->SetLineColor(kRed);
	pedestal->Draw("same");

	for (uint k=1; k <= mMaxPhotons; k++) {
		auto pbnLambda = [k, this](Double_t *x, Double_t *par) {
			 double_t xtotal = 0;
			 for (uint i = 1; i <= mMaxPhotons; ++i) {
				 xtotal += pbnFunction(x, par, i, k); // normal dist for dynodes
			 }
			 return xtotal;
		};
		TF1 *gaussian = new TF1("gaussian", pbnLambda, mXmin, mXmax, 9);
		gaussian->SetParameters(mLowPEPar);
		gaussian->SetNpx(500);
		gaussian->SetLineWidth(2);
		gaussian->SetLineColor(kBlue);
		gaussian->Draw("same");
	}

	mLowPEFit->SetNpx(500);
	mLowPEFit->SetLineWidth(2);
	mLowPEFit->SetLineColor(kMagenta);
	mLowPEFit->Draw("same");

	if (boost::filesystem::create_directories(output.parent_path()))
		COUTP("[directory][new] " << output);
	canvas->SaveAs(output.c_str());
	COUTP("[file][output] " << output);
}

float PulseSpectrumFit::GetTrueCharge(float x) {
	double sum = 0;
	for (auto& PEFit_pair : mPEMap) {
		uint pe = PEFit_pair.first;
		TF1* PEFit = PEFit_pair.second;
		sum += PEFit->Eval(x);
	}
	if (sum==0) THROW("mPEMap appears to be empty");
	map<uint,double> probM;
	for (auto& PEFit_pair : mPEMap) {
		uint pe = PEFit_pair.first;
		TF1* PEFit = PEFit_pair.second;
		probM[pe] = PEFit->Eval(x)/sum;
	}
	gRandom = new TRandom3(0);
	double p0 = gRandom->Uniform();
	float true_pe = -1;
	double current_p = 0;
	for (auto p_pair : probM) {
		uint pe = p_pair.first;
		double p = current_p + p_pair.second;
		if (p0 > current_p && p0 <= p) {
			true_pe = pe;
			break;
		}
		else current_p = p;
	}
	if (true_pe == -1) THROW("true_pe not set, p0 = " << p0);
	return true_pe;
}
