//
// Created by Jason Watson on 16/09/15.
//

#ifndef OXTOOLS_ENTRY_H
#define OXTOOLS_ENTRY_H

#include <initialise.h>
#include <utilities.h>
#include <Pixel.h>

class Entry {
private:
	 static uint32_t sIdGenerator;
	 static string sInvestigation;
	 uint32_t mTTreeIndex;
	 uint32_t mEvent;
	 uint32_t mSourceEvent;
	 uint64_t mEventTimestamp;
	 int mCameraId;
	 int mPixel;
	 float mPulseHeight;
	 float mPulseArea;
	 float mPulsePosition;
	 float mTrueNPE;
	 map<string,float> mBranchValueMap;

	 set<uint32_t> mEventIdSet; // Set for creating incremental id to fix corsika events

public:
	 friend class Run;
	 friend class Event;

	 Entry() {
		 Reset();
	 }

	 Entry(string txt_file_line) {
		 parse_txt_file_line(txt_file_line);
	 }

	 void Reset();
	 static void ResetStatic();
	 static void SetInvestigation(string investigation) { sInvestigation = investigation;}
	 void SetOutputReadhessTTreeBranches(TTree *&output_TTree);
	 void SetDefaultOxtoolsInputBranches(TTree *&input_TTree);
	 void parse_txt_file_line(string txt_file_line);
	 void IncludeOxtoolInputBranch(TTree *&input_TTree, const vector<string> &branch_name_vector);
	 void IncludeOxtoolInputBranch(TTree *&input_TTree, string branch_name);

	 GETSTATIC(Investigation, Investigation, string);
	 GET(TTreeIndex, TTreeIndex, uint32_t);
	 GET(Event, Event, uint32_t);
	 GET(SourceEvent, SourceEvent, uint32_t);
	 GET(EventTimestamp, EventTimestamp, uint32_t);
	 GET(CameraId, CameraId, uint32_t);
	 GET(Pixel, Pixel, int);
	 GET(PulseHeight, PulseHeight, float);
	 GET(PulseArea, PulseArea, float);
	 GET(PulsePosition, PulsePosition, float);
	 GET(TrueNPE, TrueNPE, float);
	 GETMAPCONTENT(BranchValue, BranchValue, float, string);
};

#endif //OXTOOLS_ENTRY_H
