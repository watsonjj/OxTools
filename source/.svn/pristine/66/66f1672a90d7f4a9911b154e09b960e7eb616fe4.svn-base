#include "Filepath.h"
#include "PulseSpectrumFit.h"

int main(int argc, char *argv[]) {
	START();
	string help_message = Form(
			  "%s [-f {input_filepath}] [-b {branch}] [-e {event_number} | -a] [OPTIONS] \n"
						 "  -- program to plot camera image from a TTree                                 \n\n"
						 "Options:        Arguments:          Description:                                 \n"
						 " -h | --help                         show the help text                          \n"
						 " -f              [input_filepath]    path to the root file (or txt file,         \n"
						 "                                       which will be converted)                  \n"
						 " -b              [branch]           name of the branch to plot in the zaxis     \n"
						 "                                       (colour axis)                             \n"
						 " -H                                  high light level fitting                    \n",
			  argv[0]);
	/// TODO: create algorithm to add new branches containing user created pulse height and pulse area

	// Define variables;
	fs::path input_filepath;
	string branch;
	uint32_t event = 0;
	bool high = false;

	// Check for required arguments
	bool input_filepath_f = false;
	bool branch_name_f = false;

	for (int i = 1; i < argc; i++) {
		if (strcmp(argv[i], "-h") == 0 || strcmp(argv[i], "--help") == 0) {
			std::cout << help_message << endl;
			return 1;
		}
		if (strcmp(argv[i], "-f") == 0) {
			if (i + 1 != argc) {
				input_filepath = argv[i + 1];
				input_filepath_f = true;
			}
		}
		if (strcmp(argv[i], "-b") == 0) {
			if (i + 1 != argc) {
				branch = argv[i + 1];
				branch_name_f = true;
			}
		}
		if (strcmp(argv[i], "-H") == 0) {
			high = true;
		}
	}

	// Required options
	if (!input_filepath_f) {
		std::cout << Print::Level() << "[arg][error] Required argument not specified: [input_filepath]" << endl;
		std::cout << help_message << endl;
		return 1;
	}
	if (!branch_name_f) {
		std::cout << Print::Level() << "[arg][error] Required argument not specified: [branch]" << endl;
		std::cout << help_message << endl;
		return 1;
	}

	// Load Filepath
	auto filepath = FilepathLoader::Load(input_filepath);
	Run_ptr run = filepath->Read();

	string run_identifier = filepath->GetRunIdentifier() + "_";
	fs::path output = filepath->GetOutputDirectory() / run_identifier;
	PulseSpectrumFit low_pe_fit(run->GetSpectrum(branch), "low", output);

//	for (int i = 0; i < 100; i++) {
//		cout << low_pe_fit.GetTrueCharge(i) << endl;
//	}

	END();
	return 0;
}

