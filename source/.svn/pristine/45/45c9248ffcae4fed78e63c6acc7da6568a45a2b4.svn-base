 //
// Created by Jason Watson on 04/11/15.
//

#include <HillasParameter.h>


 void c_TTree::set_tree (Filepath_ptr Tfilepath){

     //myfile= new TFile("~/Dropbox/OxTools_outputs/r603.ox.root","READ");
     myfile= new TFile(Tfilepath->GetInput().c_str(),"READ");
     input_eventTree = (TTree*)myfile->Get("event"); // initialising the TREE
     input_pixelTree = (TTree*)myfile->Get("pixel");
     entries = (Int_t)input_pixelTree->GetEntries();
     entries_e = (Int_t)input_eventTree->GetEntries();

     //set initial branch values
     fPulseHeight=0;
     fPixelId=0;
     fPixelX=0;
     fPixelY=0;
     fEvent=0;

     //then associate each branch of input_TTree to each previously declared variable:
     input_eventTree->SetBranchAddress("fPulseHeight",&fPulseHeight);
     input_eventTree->SetBranchAddress("fEventIndex", &fEvent);
     input_eventTree->SetBranchAddress("fPixelId", &fPixelId);
     input_pixelTree->SetBranchAddress("fPixelX",&fPixelX);           //This is the x coordinate
     input_pixelTree->SetBranchAddress("fPixelY",&fPixelY);

     //These set bounds needed for histogram
     x_min = input_pixelTree->GetMinimum("fPixelX");
     x_max = input_pixelTree->GetMaximum("fPixelX");
     y_min = input_pixelTree->GetMinimum("fPixelY");
     y_max = input_pixelTree->GetMaximum("fPixelY");
     max_height = input_eventTree->GetMaximum("fPulseHeight");
     min_height = input_eventTree->GetMinimum("fPulseHeight");
     max_event = input_eventTree->GetMaximum("fEventIndex");
     max_pixelID= input_eventTree->GetMaximum("fPixelId");

     num_pixel_entries = input_pixelTree->GetEntries();
 }


void ImageValues::SetHisto()
 {
     int number_xBins = 48; //find a way to replace 48 with something less hard-coded
     int number_yBins = 48;
     int number_zBins = 40;
     h2D_initial = new TH2F("h_2Dinitial", "2D Camera Image",number_xBins, x_min -0.01, x_max + 0.01, number_yBins, y_min-.01, y_max+0.1); //histogram of the pixel layout
 }


//function fills vectors and histogram
void ImageValues::FillVectors(Filepath_ptr Tfilepath)
 {
     c_TTree tree1;
     tree1.set_tree(Tfilepath);
     int j=0;
     int k=0;
     do
     {

         Int_t pulse_entry = j + (tree1.max_pixelID +1)*event_number;
         tree1.input_pixelTree->GetEntry(k);
         tree1.input_eventTree->GetEntry(pulse_entry);

         mag_pixel_all.push_back(tree1.fPulseHeight); //puts value of pulse height into vector
         if (mag_pixel_all[j]<4)
         {
             j++;
         }
         else
         {
             mag_pixel.push_back(tree1.fPulseHeight);
             pixel_id.push_back(tree1.fPixelId);
             xcoord.push_back(tree1.fPixelX);
             ycoord.push_back(tree1.fPixelY);
             h2D_initial->Fill(tree1.fPixelX, tree1.fPixelY);

             k++;
             j++;
         }


     } while(k< tree1.entries);

 }

 //this function gets histogram max, min, bins, and number of triggered pixels
void ImageValues::GetValues(TH2F* histogram)
 {

     Float_t photon_number=0;        //will be bin content
     int pixel_counter=0;            //total pixels
     triggered_pixels = 0;    //pixels with non-zero bin content

     x_binN = histogram->GetXaxis()->GetNbins();
     y_binN = histogram->GetYaxis()->GetNbins();
     x_max = histogram->GetXaxis()->GetXmax();
     x_min = histogram->GetXaxis()->GetXmin();
     y_max = histogram->GetYaxis()->GetXmax();
     y_min = histogram->GetYaxis()->GetXmin();

     TAxis *xaxisH  = histogram->GetXaxis();
     TAxis *yaxisH  = histogram->GetYaxis();

     for (int x_bin = 0; x_bin < x_binN+1; x_bin++)
     {
         for (int y_bin = 0; y_bin < y_binN+1; y_bin++)
         {

             pixel_counter++;
             Int_t bin = histogram->GetBin(x_bin, y_bin);
             photon_number = histogram->GetBinContent(bin);

             if (photon_number !=0)
             {
                 triggered_pixels += 1;
             }
         }
     }
 }



//Function to calculate hillas parameters and return a set of structure hillas
 void c_hillas::calculate_hillas (vector<Float_t> x_v, vector<Float_t> y_v, vector<Float_t> photon_v, int trig_pixels)
 {
    double pi = TMath::Pi();

    //Intialise the variables
    n_sum=0;
    nx_sum=0;
    nx2_sum=0;
    nx3_sum=0;
    ny_sum=0;
    ny2_sum=0;
    ny3_sum=0;
    nxy_sum=0;
    nx2y_sum=0;
    nxy2_sum=0;


    //calculate sums of pixel position and amplitude
    for (int i=0; i<trig_pixels; i++)
    {
        x = x_v[i];
        y = y_v[i];
        n = photon_v[i];

        n_sum +=  n;

        nx_sum +=  n* x;
        ny_sum +=  n* y;
        nxy_sum +=  n* x* y;

        nx2_sum +=  n* x* x;
        ny2_sum +=  n* y* y;

        nx3_sum +=  n* x* x* x;
        ny3_sum +=  n* y* y* y;

        nx2y_sum +=  n* x* x* y;
        nxy2_sum +=  n* x* y* y;
    }

    //calculate moments
    x_m =  nx_sum/ n_sum;
    x2_m =  nx2_sum/ n_sum;
    x3_m =  nx3_sum/ n_sum;
    y_m =  ny_sum/ n_sum;
    y2_m =  ny2_sum/ n_sum;
    y3_m =  ny3_sum/ n_sum;
    xy_m =  nxy_sum/ n_sum;
    x2y_m =  nx2y_sum/ n_sum;
    xy2_m =  nxy2_sum/ n_sum;

    //calculate deviations
    s_x2 =  x2_m - ( x_m* x_m);
    s_x3 =  x3_m - (3* x_m* x2_m) + (2* x_m* x_m* x_m);
    s_y2 =  y2_m - ( y_m* y_m);
    s_y3 =  y3_m - (3* y_m* y2_m) + (2* y_m* y_m* y_m);
    s_xy =  xy_m - ( x_m* y_m);
    s_xy2 =  xy2_m - (2* y_m* xy_m) - ( y2_m* x_m) + (2* x_m* y_m* y_m);
    s_x2y =  x2y_m - (2* x_m* xy_m) - ( x2_m* y_m) + (2* y_m* x_m* x_m);

    //calculate Hillas parameters
    d =  s_y2 -  s_x2;
    s = sqrt(( d* d) + (4* s_xy* s_xy));
    u = 1.0 -  d/ s;
    v = 2.0 -  u;
    w = sqrt(4*( y2_m -  x2_m)*( y2_m -  x2_m)* xy_m* xy_m);
    tan_phi = (( d +  s)* y_m + 2* s_xy* x_m)/(2* s_xy* y_m - ( d -  s)* x_m);
    phi = atan( tan_phi)*180/pi;
    length = sqrt(( s_x2 +  s_y2 +  s)/2);
    width = sqrt(( s_x2 +  s_y2 -  s)/2);
    miss_part = (1.0/3)*( u* x_m* x_m +  v* y_m* y_m) - (2* s_xy* x_m* y_m/ s);
    miss = sqrt( miss_part);
    distance = sqrt( x_m* x_m +  y_m* y_m);
    azwidth = sqrt(( x_m* x_m* y2_m - 2* x_m* y_m* xy_m +  x2_m* y_m* y_m)/( distance* distance));
    sdash_x3 =  s_x3*pow(cos( phi),3) + 3* s_x2y*pow(cos( phi),2)*sin( phi) + 3* s_xy2*cos( phi)*pow(sin( phi),2) +  s_y3*pow(sin( phi),3);
    asymmetry = (pow( sdash_x3,(1.0/3)))/ length;
    miss_dist =  miss/ distance;
    alpha = (asin( miss_dist))*180/pi;

}

void c_hillas::plot_ellipse()
 {
     TEllipse *ehillas= new TEllipse(x_m , y_m , width, length);

     Float_t theta = 90 + phi;
     ehillas->SetTheta(theta);
     ehillas->SetFillColorAlpha(4,0.2);
     ehillas->SetLineColor(4);
     ehillas->SetLineWidth(2);
     ehillas->Draw("Same");
 }


