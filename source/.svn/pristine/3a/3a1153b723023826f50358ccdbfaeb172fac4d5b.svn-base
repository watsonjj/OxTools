//
// Created by Jason Watson on 02/11/15.
//

#include <Camera.h>


void Camera::Init() {
	mCameraId = 0;
	mNumEvents = 0;
	mNumPixels = 0;
	mNumRows = 0;
	mNumColumns = 0;
	mNumModules = 0;
	mNumModulePixels = 0;
	mEventMap.clear();
	mPixelMap.clear();
	mBaseCameraTH2F = NULL;
	mPixelIdTH2F = NULL;
}

void Camera::AddEventEntry(const Entry &entry_holder) {
	auto itp = mEventMap.insert(std::map<int, Event>::value_type (entry_holder.GetEventId(),Event(this)));
	(itp.first->second).AddEntry(entry_holder);
	mCameraId = entry_holder.GetCameraId();
}

void Camera::AddPixelEntry(const Pixel &pixel_holder) {
	mPixelMap.insert(std::map<int, Pixel>::value_type (pixel_holder.mPixelId,pixel_holder));
}

TH2F* Camera::GetBaseCameraTH2F() {
	if (!mBaseCameraTH2F) {
		mBaseCameraTH2F = new TH2F(Form("base_histogram%d", mCameraId),
		                                 "Base Histogram", mNumColumns, 0,
		                                 mNumColumns, mNumRows, 0, mNumRows);
		mBaseCameraTH2F->GetXaxis()->SetLabelSize(0);
		mBaseCameraTH2F->GetXaxis()->SetTickLength(0);
		mBaseCameraTH2F->GetYaxis()->SetLabelSize(0);
		mBaseCameraTH2F->GetYaxis()->SetTickLength(0);
		mBaseCameraTH2F->SetStats(0);
		mBaseCameraTH2F->GetZaxis()->SetLabelSize(0.03);
		mBaseCameraTH2F->GetZaxis()->SetTitleOffset(1.3);
		mBaseCameraTH2F->SetMarkerSize(0.5);
		mBaseCameraTH2F->SetMarkerColor(kWhite);

		//Fill camera histogram with empty values so empty slots appear white
		for (int i=0;i<mNumColumns;i++) {
			for (int j=0;j<mNumRows;j++) {
//				mBaseCameraTH2F->SetBinContent(i+1,j+1,min-1);
				mBaseCameraTH2F->SetBinContent(i+1,j+1,-FLT_MAX);
			}
		}

		// Define gradient color palette
		const Int_t NRGBs = 5;
		const Int_t NCont = 255;
		Double_t stops[NRGBs] = {0.00, 0.34, 0.61, 0.84, 1.00};
		Double_t red[NRGBs] = {0.00, 0.00, 0.87, 1.00, 0.51};
		Double_t green[NRGBs] = {0.00, 0.81, 1.00, 0.20, 0.00};
		Double_t blue[NRGBs] = {0.51, 1.00, 0.12, 0.00, 0.00};
		TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
		gStyle->SetNumberContours(NCont);
	}
	return mBaseCameraTH2F;
}

vector<TLine*> Camera::GetPixelOutlineVector() {
	if (mPixelOutlineVector.empty()) {
		int row, column;
		TLine *line1, *line2, *line3, *line4;
		int sqrt_modulepixel = (int) sqrt(mNumModulePixels);
		if (sqrt_modulepixel != 8) COUTP("[DEBUG] sqrt_modulepixel != 8");
		for (const auto &pixel_it_pair : mPixelMap) {
			const auto &pixel = pixel_it_pair.second;
			row = pixel.GetRow();
			column = pixel.GetColumn();
			line1 = new TLine(column, row, column, row + 1);
			line2 = new TLine(column, row, column + 1, row);
			line3 = new TLine(column + 1, row, column + 1, row + 1);
			line4 = new TLine(column, row + 1, column + 1, row + 1);
			if ((row + 1) % sqrt_modulepixel == 0) {
				line4->SetLineColor(2);
				line4->SetLineWidth(3);
			}
			if (row % sqrt_modulepixel == 0) {
				line2->SetLineColor(2);
				line2->SetLineWidth(3);
			}
			if ((column + 1) % sqrt_modulepixel == 0) {
				line3->SetLineColor(2);
				line3->SetLineWidth(3);
			}
			if (column % sqrt_modulepixel == 0) {
				line1->SetLineColor(2);
				line1->SetLineWidth(3);
			}
			mPixelOutlineVector.push_back(line1);
			mPixelOutlineVector.push_back(line2);
			mPixelOutlineVector.push_back(line3);
			mPixelOutlineVector.push_back(line4);
		}
	}
	return mPixelOutlineVector;
}

TH2F* Camera::GetPixelIdTH2F() {
	if (!mPixelIdTH2F) {
		mPixelIdTH2F = (TH2F *) GetBaseCameraTH2F()->Clone("rCameraImage");
		for (const auto &pixel_pair : mPixelMap) {
			const auto &pixel = pixel_pair.second;
			int pixel_id = pixel.GetPixelId();
			int row = pixel.GetRow();
			int column = pixel.GetColumn();
			mPixelIdTH2F->SetBinContent(column + 1, row + 1, pixel_id);
		}
	}
	return mPixelIdTH2F;
}
