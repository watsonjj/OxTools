//
// Created by Jason Watson on 01/10/15.
//

#include "charge_resolution_plotter.h"


void charge_resolution_plotter(vector<Filepath_ptr> filepathV, bool save_images,
                               string output_name, int max_npe) {
	START();

	string trueNPE_branch = "fTrueNPE";
	string measuredNPE_branch = "fPulseArea";
	set<string> branchV = {trueNPE_branch, measuredNPE_branch};

	// Create canvas
	COUTP("[canvas] Creating canvas");
	TCanvas *Cc1 = new TCanvas("Cc1", "Cc1", 3000, 1500);
	Cc1->Divide(2);
	TPad *Ppad1 = (TPad *) Cc1->GetPad(1);
	TPad *Ppad2 = (TPad *) Cc1->GetPad(2);
	Ppad1->SetRightMargin(0.2);
	Ppad1->SetLogx();
	Ppad1->SetLogy();
//	Ppad1->SetGrid();
	Ppad2->SetLogx();
//	Ppad2->SetGrid();

	// Create array for colors
	Style_t color_array[5] = {kBlue, kMagenta, kGray + 3, kOrange, kCyan};
	Style_t marker_array[3] = {2, 3, 5};

	TMultiGraph *mg = new TMultiGraph();
	TMultiGraph *mg_scaled = new TMultiGraph();
	TLegend *leg = new TLegend(0.81, 0.80-0.025*(filepathV.size()+3), 0.99, 0.80);

	int i = 0;
	for (auto& filepath : filepathV) {
		Run& run = filepath->GetRun(branchV);
		if (max_npe==0) max_npe = (int) run.GetBranchMax(trueNPE_branch);
		ChargeResolution* chargeResHolder = run.GetChargeResolution(trueNPE_branch,
		                                                            measuredNPE_branch, max_npe);

		TGraphErrors* g = chargeResHolder->GetChargeResolutionGraph();
		TGraphErrors* gS = chargeResHolder->GetChargeResolutionScaledGraph();

		// Style Graph
		g->SetMarkerStyle(marker_array[i % 3]);
		g->SetMarkerColor(color_array[i % 5]);
		g->SetMarkerSize(2);
		g->SetLineColor(color_array[i % 5]);
		g->SetTitle(std::to_string(i).c_str());
		gS->SetMarkerStyle(marker_array[i % 3]);
		gS->SetMarkerColor(color_array[i % 5]);
		gS->SetMarkerSize(2);
		gS->SetLineColor(color_array[i % 5]);
		gS->SetTitle(std::to_string(i).c_str());

		// Fill Multigraph
		COUTP("[TGraph] Appending to multigraph");
		if (g->GetN() > 0) {
			leg->AddEntry(g, filepath->GetRunIdentifier().c_str(), "pl");
			mg->Add(g);
			mg_scaled->Add(gS);
		}
		i++;
	}

	// Get Requirement and Goal
	Run& dummyrun = filepathV[0]->GetRun(branchV);
	if (max_npe==0) max_npe = (int) dummyrun.GetBranchMax(trueNPE_branch);
	ChargeResolution* dummychargeResHolder = dummyrun.GetChargeResolution(trueNPE_branch,
	                                                                      measuredNPE_branch,
	                                                                      max_npe);
	TGraph* g_R = dummychargeResHolder->GetRequirementGraph();
	TGraph* g_RS = dummychargeResHolder->GetRequirementScaledGraph();
	TGraph* g_G = dummychargeResHolder->GetGoalGraph();
	TGraph* g_GS = dummychargeResHolder->GetGoalScaledGraph();

	leg->AddEntry(g_R, "Requirement", "pl");
	leg->AddEntry(g_G, "Goal", "pl");
	mg->Add(g_R);
	mg->Add(g_G);
	mg_scaled->Add(g_RS);
	mg_scaled->Add(g_GS);

	TGraph* g_test = dummychargeResHolder->GetTestGraph();
	leg->AddEntry(g_test, "Test", "pl");
//	mg->Add(g_test);


	// Draw Multigraph
	COUTP("[TGraph] Drawing multigraphs");
	Cc1->cd(1);
	mg->SetTitle(output_name.c_str());
	mg->Draw("AP");
	mg->GetXaxis()->SetTitle("True Charge (Q_{True}) (p.e.)");
	mg->GetXaxis()->SetTitleSize(0.02);
	mg->GetXaxis()->SetTitleOffset(1.3);
	mg->GetXaxis()->SetLabelSize(0.02);
//	mg->GetXaxis()->SetRangeUser(0,110);
	mg->GetYaxis()->SetTitle("Fractional Charge Resolution #sigma_{Q}/Q_{True}(p.e.)");
	mg->GetYaxis()->SetTitleSize(0.02);
	mg->GetYaxis()->SetTitleOffset(1.5);
	mg->GetYaxis()->SetLabelSize(0.02);

	// Draw Legend
	leg->SetNColumns(1);
	leg->SetHeader("Run");
//	leg->SetBorderSize(0);
	leg->Draw();

	// Draw Multigraph
	Cc1->cd(2);
	mg_scaled->SetTitle("");
	mg_scaled->Draw("AP");
	mg_scaled->GetXaxis()->SetTitle("True Charge (Q_{True}) (p.e.)");
	mg_scaled->GetXaxis()->SetTitleSize(0.02);
	mg_scaled->GetXaxis()->SetTitleOffset(1.3);
	mg_scaled->GetXaxis()->SetLabelSize(0.02);
//	mg_scaled->GetXaxis()->SetRangeUser(0,110);
	mg_scaled->GetYaxis()->SetTitle("Fractional Charge Resolution #sigma_{Q}/Q_{True}(p.e.)");
	mg_scaled->GetYaxis()->SetTitleSize(0.02);
	mg_scaled->GetYaxis()->SetTitleOffset(1.5);
	mg_scaled->GetYaxis()->SetLabelSize(0.02);

	if (save_images) {
		fs::path input_directory = filepathV[0]->GetInputDirectory();
		fs::path save_name = output_name + ".png";
		fs::path save_path = input_directory / "charge_resolution" / save_name;
		if (boost::filesystem::create_directories(save_path.parent_path()))
			COUTP("[directory][new] "<< save_path);
		Cc1->SaveAs(save_path.c_str());
		COUTP("[file][output] " << save_path);
	}

	print_charge_resolution_scores(filepathV, max_npe);

	END();
}

void print_charge_resolution_scores(vector<Filepath_ptr> filepathV, int max_npe) {
	START();

	string trueNPE_branch = "fTrueNPE";
	string measuredNPE_branch = "fPulseArea";
	set<string> branchV = {trueNPE_branch, measuredNPE_branch};

	// Score Vectors
	vector<vector<string>> score_vector = {{"Run"},{"Low"},{"Low Rank"},{"High"},{"High Rank"},{"Total"},{"Total Rank"}};
	vector<vector<double>> value_vector = {{},{},{}};
	vector<vector<string>> rank_vector = {{},{},{}};
	double min_low = DBL_MAX, min_high = DBL_MAX, min_total = DBL_MAX;
	string best_low, best_high, best_total;
	double max_low = -DBL_MAX, max_high = -DBL_MAX, max_total = -DBL_MAX;
	string worst_low, worst_high, worst_total;

	for (auto& filepath : filepathV) {
		Run& run = filepath->GetRun(branchV);
		if (max_npe==0) max_npe = (int) run.GetBranchMax(trueNPE_branch);
		ChargeResolution* chargeResHolder = run.GetChargeResolution(trueNPE_branch,
		                                                            measuredNPE_branch, max_npe);

		// Scores
		score_vector[0].push_back(filepath->GetRunIdentifier());
		score_vector[1].push_back(std::to_string(chargeResHolder->GetScoreLow()));
		score_vector[3].push_back(std::to_string(chargeResHolder->GetScoreHigh()));
		score_vector[5].push_back(std::to_string(chargeResHolder->GetScoreTotal()));
		value_vector[0].push_back(chargeResHolder->GetScoreLow());
		value_vector[1].push_back(chargeResHolder->GetScoreHigh());
		value_vector[2].push_back(chargeResHolder->GetScoreTotal());
		if (min_low > chargeResHolder->GetScoreLow()) {
			min_low = chargeResHolder->GetScoreLow();
			best_low = filepath->GetRunIdentifier();
		}
		if (min_high > chargeResHolder->GetScoreHigh()) {
			min_high = chargeResHolder->GetScoreHigh();
			best_high = filepath->GetRunIdentifier();
		}
		if (min_total > chargeResHolder->GetScoreTotal()) {
			min_total = chargeResHolder->GetScoreTotal();
			best_total = filepath->GetRunIdentifier();
		}

		if (max_low < chargeResHolder->GetScoreLow()) {
			max_low = chargeResHolder->GetScoreLow();
			worst_low = filepath->GetRunIdentifier();
		}
		if (max_high < chargeResHolder->GetScoreHigh()) {
			max_high = chargeResHolder->GetScoreHigh();
			worst_high = filepath->GetRunIdentifier();
		}
		if (max_total < chargeResHolder->GetScoreTotal()) {
			max_total = chargeResHolder->GetScoreTotal();
			worst_total = filepath->GetRunIdentifier();
		}
	}

	// Rank each run
	for (int i=0; i<value_vector.size(); i++) {
		for (double current : value_vector[i]) {
			int position = 0;
			for (double compare : value_vector[i]) {
				if (current > compare) position++;
			}
			position++;
			rank_vector[i].push_back(std::to_string(position));
		}
	}
	for (string rank: rank_vector[0]) score_vector[2].push_back(rank);
	for (string rank: rank_vector[1]) score_vector[4].push_back(rank);
	for (string rank: rank_vector[2]) score_vector[6].push_back(rank);

	score_vector[0].push_back("BEST: ");
	score_vector[1].push_back(best_low);
	score_vector[3].push_back(best_high);
	score_vector[5].push_back(best_total);
	score_vector[0].push_back("WORST: ");
	score_vector[1].push_back(worst_low);
	score_vector[3].push_back(worst_high);
	score_vector[5].push_back(worst_total);

	COUTP("[chargeres][scores] : ");
	Table score_table(score_vector);
	score_table.Print();

	END();
}

void charge_variation_plotter(vector<Filepath_ptr> filepathV, bool save_images, int max_npe) {

	START();

	string trueNPE_branch = "fTrueNPE";
	string measuredNPE_branch = "fPulseArea";
	set<string> branchV = {trueNPE_branch, measuredNPE_branch};

	for (auto& filepath : filepathV) {

		// Create canvas
		COUTP("[canvas] Creating canvas");
		TCanvas *canvas = new TCanvas("Cc1", "Cc1", 1500, 1500);
		TPad *Ppad1 = (TPad *) canvas->GetPad(0);
		Ppad1->SetRightMargin(0.2);
		Ppad1->SetLogz();
		Ppad1->SetGrid();

		Run& run = filepath->GetRun(branchV);
		if (max_npe==0) max_npe = (int) run.GetBranchMax(trueNPE_branch);
		ChargeResolution* chargeResHolder = run.GetChargeResolution(trueNPE_branch,
		                                                            measuredNPE_branch, max_npe);


		rainbow_palette();
		TH2F* hist = chargeResHolder->GetVariationHist();
		hist->GetXaxis()->SetTitle("log_{10} Q_{True}");
		hist->GetYaxis()->SetTitle("log_{10} Q_{Measured}");
		hist->GetXaxis()->SetTitleSize(0.02);
		hist->GetYaxis()->SetTitleSize(0.02);
		hist->GetXaxis()->SetTitleOffset(2);
		hist->GetYaxis()->SetTitleOffset(2);
		hist->SetTitle(filepath->GetRunIdentifier().c_str());
		hist->Draw("colz");

		TLine* line = new TLine(log10(1),log10(1),log10(max_npe),log10(max_npe));
		line->SetLineStyle(9);
		line->SetLineColor(kMagenta);
		line->SetLineWidth(2);
		line->Draw("same");

		if (save_images) {
			fs::path save_name = filepath->GetRunIdentifier()
			                     + "_ChargeVariation"
			                     + ".png";
			fs::path save_path = filepath->GetOutputDirectory() / save_name;
			filepath->CreateOutputDirectory();
			canvas->SaveAs(save_path.c_str());
				COUTP("[file][output] " << save_path);
			canvas->Clear("D");
		}
	}
	END();
}



bool old_charge_resolution_plotter(set<fs::path> input_filepath_set, bool save_images,
                               string output_name, int max_npe) {
	START();

	// Obtain goal and requirement maps
	cout << Print::Level() << "[vector] Obtaining requirement and goal maps" << endl;
	map<int,float> rms_map_requirement= charge_resolution_requirement_map(max_npe);
	map<int,float> rms_map_goal= charge_resolution_goal_map(max_npe);

	// Create scale vector
	map<int,float> scale_map = rms_map_goal;

	// Get max value the scale vector is defined up to
	float scale_max = (*std::max_element(std::begin(scale_map),std::end(scale_map))).first;

	// Create canvas
	cout << Print::Level() << "[canvas] Creating canvas" << endl;
	TCanvas *Cc1 = new TCanvas("Cc1", "Cc1", 3000, 1500);
	Cc1->Divide(2);
	TPad *Ppad1 = (TPad *) Cc1->GetPad(1);
	TPad *Ppad2 = (TPad *) Cc1->GetPad(2);
	Ppad1->SetRightMargin(0.2);
	Ppad1->SetLogx();
	Ppad1->SetLogy();
	Ppad2->SetLogx();

	// Create array for colors
	Style_t color_array[5] = {kBlue, kMagenta, kGray + 3, kOrange, kCyan};
	Style_t marker_array[3] = {2, 3, 5};


	TMultiGraph *mg = new TMultiGraph();
	TMultiGraph *mg_scaled = new TMultiGraph();
	TLegend *leg = new TLegend(0.81, 0.80-0.025*(input_filepath_set.size()+3), 0.99, 0.80);

	// Build goal and requirement graphs
	TGraph* g_requirement = new TGraph();
	TGraph* g_requirement_scaled = new TGraph();
	TGraph* g_goal = new TGraph();
	TGraph* g_goal_scaled = new TGraph();
	for (auto& it : rms_map_requirement) {
		int current_point = g_requirement->GetN();
		g_requirement->SetPoint(current_point, it.first, it.second);
		if (it.first <= scale_max) {
			g_requirement_scaled->SetPoint(current_point, it.first, it.second / scale_map[it.first]);
		}
	}
	for (auto& it : rms_map_goal) {
		int current_point = g_goal->GetN();
		g_goal->SetPoint(current_point, it.first, it.second);
		if (it.first <= scale_max) {
			g_goal_scaled->SetPoint(current_point, it.first, it.second / scale_map[it.first]);
		}
	}

	// Set styles for goal and requirement graphs
	g_requirement->SetMarkerColor(kRed);
	g_requirement->SetMarkerStyle(2);
	g_requirement->SetMarkerSize(0.25);
	g_requirement->SetLineColor(kRed);
	leg->AddEntry(g_requirement, "Requirement", "pl");

	g_goal->SetMarkerColor(kGreen);
	g_goal->SetMarkerStyle(2);
	g_goal->SetMarkerSize(0.25);
	g_goal->SetLineColor(kGreen);
	leg->AddEntry(g_goal, "Goal", "pl");

	g_requirement_scaled->SetMarkerColor(kRed);
	g_requirement_scaled->SetMarkerStyle(2);
	g_requirement_scaled->SetMarkerSize(0.25);
	g_requirement_scaled->SetLineColor(kRed);

	g_goal_scaled->SetMarkerColor(kGreen);
	g_goal_scaled->SetMarkerStyle(2);
	g_goal_scaled->SetMarkerSize(0.25);
	g_goal_scaled->SetLineColor(kGreen);

	int i = 0;
	TGraphErrors *g;
	TGraphErrors *g_scaled;
	cout << Print::Level() << "[file] Beginning loop over files" << endl;
	Print::LevelIncrease();
	for (fs::path path : input_filepath_set) {
		// Get the maps
		cout << Print::Level() << "[file] Obtaining vector for file" << endl;
		vector<map<int,float>> return_vector = charge_resolution_map(path, max_npe);
		map<int,float> rms_map = return_vector[0];
		map<int,float> rms_error_map = return_vector[1];

		// Create graph and fill graph with points
		g = new TGraphErrors();
		g_scaled = new TGraphErrors();
		for (auto& it : rms_map) {
			int current_point = g->GetN();
			g->SetPoint(current_point, it.first, it.second);
			g->SetPointError(current_point, 0, rms_error_map[it.first]);
			if (it.first <= scale_max) {
				g_scaled->SetPoint(current_point, it.first, it.second / scale_map[it.first]);
				g_scaled->SetPointError(current_point, 0, 0);
//				                        rms_error_map[it.first] / scale_vector[it.first]);
			}
		}

		// Style Graph
		g->SetMarkerStyle(marker_array[i % 3]);
		g->SetMarkerColor(color_array[i % 5]);
		g->SetMarkerSize(2);
		g->SetLineColor(color_array[i % 5]);
		g->SetTitle(std::to_string(i).c_str());
		g_scaled->SetMarkerStyle(marker_array[i % 3]);
		g_scaled->SetMarkerColor(color_array[i % 5]);
		g_scaled->SetMarkerSize(2);
		g_scaled->SetLineColor(color_array[i % 5]);
		g_scaled->SetTitle(std::to_string(i).c_str());

		// Fill Multigraph
		cout << Print::Level() << "[TGraph] Appending to multigraph" << endl;
		if (g->GetN() > 0) {
//			leg->AddEntry(g, filepaths.GetInputName().c_str(), "pl");
			mg->Add(g);
			mg_scaled->Add(g_scaled);
		}
		i++;
	}
	Print::LevelDecrease();

	// Add requirment and goal to multigraph
	mg->Add(g_requirement);
	mg->Add(g_goal);
	mg_scaled->Add(g_requirement_scaled);
	mg_scaled->Add(g_goal_scaled);

	// Draw Multigraph
	cout << Print::Level() << "[TGraph] Drawing multigraphs" << endl;
	Cc1->cd(1);
	mg->SetTitle(output_name.c_str());
	mg->Draw("AP");
	mg->GetXaxis()->SetTitle("True Charge (Q_{True}) (p.e.)");
	mg->GetXaxis()->SetTitleSize(0.02);
	mg->GetXaxis()->SetTitleOffset(1.3);
	mg->GetXaxis()->SetLabelSize(0.02);
//	mg->GetXaxis()->SetRangeUser(0,110);
	mg->GetYaxis()->SetTitle("Fractional Charge Resolution #sigma_{Q}/Q_{True}(p.e.)");
	mg->GetYaxis()->SetTitleSize(0.02);
	mg->GetYaxis()->SetTitleOffset(1.5);
	mg->GetYaxis()->SetLabelSize(0.02);

	// Draw Legend
	leg->SetNColumns(1);
	leg->SetHeader("Run");
//	leg->SetBorderSize(0);
	leg->Draw();

	// Draw Multigraph
	Cc1->cd(2);
	mg_scaled->SetTitle("");
	mg_scaled->Draw("AP");
	mg_scaled->GetXaxis()->SetTitle("True Charge (Q_{True}) (p.e.)");
	mg_scaled->GetXaxis()->SetTitleSize(0.02);
	mg_scaled->GetXaxis()->SetTitleOffset(1.3);
	mg_scaled->GetXaxis()->SetLabelSize(0.02);
//	mg_scaled->GetXaxis()->SetRangeUser(0,110);
	mg_scaled->GetYaxis()->SetTitle("Fractional Charge Resolution #sigma_{Q}/Q_{True}(p.e.)");
	mg_scaled->GetYaxis()->SetTitleSize(0.02);
	mg_scaled->GetYaxis()->SetTitleOffset(1.5);
	mg_scaled->GetYaxis()->SetLabelSize(0.02);

//	if (save_images) {
//		Filepaths filepaths(*input_filepath_set.begin());
//
//		filepaths.BuildOutput("charge_resolution", output_name, ".png");
//		filepaths.CreateOutputDirectory();
//		Cc1->SaveAs(filepaths.GetOutput().c_str());
//	}

	END();
	return 0;
}


void remove_empty_elements(std::vector<float> &vector_y, std::vector<float> &vector_x) {
	assert(vector_y.size() == vector_x.size());
	for (std::vector<float>::iterator it = vector_y.begin(); it != vector_y.end(); ++it) {
		long index = std::distance(vector_y.begin(), it);
		if (*it == 0) {
			vector_y.erase(it);
			vector_x.erase(vector_x.begin() + index);
		}
	}
}

vector<map<int,float>> charge_resolution_map(fs::path filepaths, int max_npe) {
	START();

	//Open tree from root file
	cout << Print::Level() << "[file] Opening input file: " << filepaths << endl;
	TFile *rootFile = new TFile(filepaths.c_str(), "READ");
	cout << Print::Level() << "[ttree] Opening OxTools TTrees" << endl;
	TTree *event_ttree = (TTree *) rootFile->Get("event");

	//Create objects and assign addresses for TTree branches
	Entry event_holder;
	event_holder.IncludeOxtoolInputBranch(event_ttree, "fPulseArea");
	event_holder.IncludeOxtoolInputBranch(event_ttree, "fTrueNPE");

	//Create array to hold values of measured charge, and related values
	map<int,vector<float>> measured_charge_vector;
	map<int,vector<float>> measured_charge_x_vector;

	map<int,float> sum_vector;
	map<int,float> N_vector;
	map<int,float> rms_vector;
	map<int,float> rms_vector_heide;
	map<int,float> rms_error_vector;
	map<int,TH1F*> hist_vector;
	char *hname = new char[10];
	cout << Print::Level() << "[hist] Creating histogram to store distribution for each p.e. value" << endl;
	Progress progress(max_npe);
	for (int i = 0; i <= max_npe; i++) {
		progress.Print(i);
		hist_vector[i] = new TH1F(hname, hname, 1000, -10, 1180);
	}

	//Loop over ttree
	cout << Print::Level() << "[ttree] Extracting charge information from TTree" << endl;
	Progress progress2(event_ttree->GetEntries());
	for (int i = 0; i < event_ttree->GetEntries(); i++) {
		progress2.Print(i);
		event_ttree->GetEntry(i);
		float measuredQ = event_holder.GetBranchValue("fPulseArea");
		int trueQ = int(event_holder.GetBranchValue("fTrueNPE"));
		if (trueQ <= max_npe) {
			measured_charge_vector[trueQ].push_back(measuredQ);
			measured_charge_x_vector[trueQ].push_back(trueQ);

			sum_vector[trueQ] += powf(measuredQ - trueQ, 2);
			N_vector[trueQ]++;
			hist_vector[trueQ]->Fill(measuredQ);
		}
	}

	for (int trueQ = 1; trueQ <= max_npe; trueQ++) {
		if (N_vector[trueQ] > 0) {
			rms_vector[trueQ] = sqrtf((1 / N_vector[trueQ]) * sum_vector[trueQ]) / trueQ;
			if (hist_vector[trueQ]->GetMean() != 0) {
				rms_error_vector[trueQ] = (float) hist_vector[trueQ]->GetRMSError() /
				                          (float) hist_vector[trueQ]->GetMean();
			}
			double sum = 0.;

			for (int j = 0; j <= hist_vector[trueQ]->GetNbinsX(); j++) {
				double measuredQ = hist_vector[trueQ]->GetBinCenter(j);
				double NmeasuredQ = hist_vector[trueQ]->GetBinContent(j);
				if (NmeasuredQ > 0) {
					sum += pow((measuredQ - trueQ), 2) * NmeasuredQ;
				}
			}
			rms_vector_heide[trueQ] = (float) sqrt((sum / N_vector[trueQ]) + trueQ) / trueQ;
		}
	}
	END();
	Entry::ResetStatic();
	return vector<map<int,float>> {rms_vector_heide,rms_error_vector};

	//TODO: heide method only print up to about ~1000
}

void print_requirement_goal() {
	vector<string> file_array = {"/Users/Jason/Software/outputs/readhess/Requirements_jim2.txt",
									"/Users/Jason/Software/outputs/readhess/Goal_jim2.txt"};
	vector<float> rms_vector;
	int true_charge;
	float measured_charge;
	string line;
	std::ifstream file;

	for (string filepath : file_array) {
		file.open(filepath.c_str());
		while (!file.eof()) {
			getline(file, line);
			std::istringstream iss(line);
			iss >> true_charge;
			iss >> measured_charge;
			rms_vector.push_back(measured_charge);
		}

		cout << endl;
		cout << "vector<float> rms_vector = {0.0,";
		for (float entry : rms_vector) {
			cout << entry << ", ";
		}
		cout << "};" << endl;
	}
}

map<int,float> charge_resolution_requirement_map(int max_npe) {
	vector<float> vector = requirement_vector();
	map<int,float> map;
	for (int i=0; i<int(vector.size()); i++) {
		if (i+1 <= max_npe) {
			map[i + 1] = vector[i];
		}
	}
	return map;
}

map<int,float> charge_resolution_goal_map(int max_npe) {
	vector<float> vector = charge_resolution_goal_vector();
	map<int,float> map;
	for (int i=0; i<int(vector.size()); i++) {
		if (i+1 <= max_npe) {
			map[i + 1] = vector[i];
		}
	}
	return map;
}

vector<float> charge_resolution_requirement_vector() {
	vector<float> rms_vector =
			  {2.0238, 1.17959, 0.885422, 0.731683, 0.635476, 0.568765,
			   0.519335, 0.480978, 0.450182, 0.424803, 0.403454, 0.385193,
			   0.369357, 0.355466, 0.34316, 0.332167, 0.322274, 0.313314,
			   0.305153, 0.297682, 0.290811, 0.284466, 0.278586, 0.273118,
			   0.268017, 0.263246, 0.258771, 0.254565, 0.250602, 0.24686,
			   0.24332, 0.239966, 0.236782, 0.233756, 0.230874, 0.228126,
			   0.225503, 0.222995, 0.220596, 0.218297, 0.216092, 0.213976,
			   0.211942, 0.209985, 0.208102, 0.206288, 0.204539, 0.202851,
			   0.201221, 0.199645, 0.198122, 0.196649, 0.195222, 0.19384,
			   0.192501, 0.191201, 0.189941, 0.188717, 0.187528, 0.186373,
			   0.18525, 0.184158, 0.183095, 0.18206, 0.181053, 0.180071,
			   0.179114, 0.178182, 0.177272, 0.176384, 0.175518, 0.174672,
			   0.173846, 0.173039, 0.172251, 0.17148, 0.170726, 0.169989,
			   0.169268, 0.168563, 0.167872, 0.167196, 0.166534, 0.165885,
			   0.165249, 0.164627, 0.164016, 0.163418, 0.162831, 0.162255,
			   0.16169, 0.161136, 0.160592, 0.160058, 0.159534, 0.159019,
			   0.158514, 0.158017, 0.157529, 0.15705, 0.156578, 0.156115,
			   0.15566, 0.155212, 0.154772, 0.154339, 0.153912, 0.153493,
			   0.153081, 0.152675, 0.152275, 0.151882, 0.151494, 0.151113,
			   0.150738, 0.150368, 0.150003, 0.149644, 0.149291, 0.148942,
			   0.148599, 0.14826, 0.147926, 0.147597, 0.147273, 0.146953,
			   0.146638, 0.146327, 0.14602, 0.145717, 0.145418, 0.145124,
			   0.144833, 0.144546, 0.144263, 0.143984, 0.143708, 0.143435,
			   0.143167, 0.142901, 0.142639, 0.14238, 0.142124, 0.141872,
			   0.141622, 0.141376, 0.141132, 0.140892, 0.140654, 0.140419,
			   0.140187, 0.139958, 0.139731, 0.139507, 0.139285, 0.139066,
			   0.13885, 0.138636, 0.138424, 0.138215, 0.138008, 0.137803,
			   0.137601, 0.1374, 0.137202, 0.137006, 0.136812, 0.136621,
			   0.136431, 0.136243, 0.136057, 0.135873, 0.135691, 0.135511,
			   0.135333, 0.135156, 0.134982, 0.134809, 0.134638, 0.134468,
			   0.1343, 0.134134, 0.13397, 0.133807, 0.133645, 0.133486,
			   0.133327, 0.133171, 0.133015, 0.132862, 0.132709, 0.132559,
			   0.132409, 0.132261, 0.132114, 0.131969, 0.131825, 0.131682,
			   0.131541, 0.131401, 0.131262, 0.131124, 0.130988, 0.130853,
			   0.130719, 0.130586, 0.130454, 0.130324, 0.130194, 0.130066,
			   0.129939, 0.129813, 0.129688, 0.129564, 0.129441, 0.129319,
			   0.129198, 0.129078, 0.128959, 0.128841, 0.128725, 0.128609,
			   0.128494, 0.12838, 0.128266, 0.128154, 0.128043, 0.127932,
			   0.127823, 0.127714, 0.127606, 0.127499, 0.127393, 0.127288,
			   0.127183, 0.127079, 0.126977, 0.126874, 0.126773, 0.126673,
			   0.126573, 0.126474, 0.126375, 0.126278, 0.126181, 0.126085,
			   0.125989, 0.125895, 0.125801, 0.125707, 0.125615, 0.125523,
			   0.125431, 0.125341, 0.125251, 0.125161, 0.125073, 0.124985,
			   0.124897, 0.12481, 0.124724, 0.124638, 0.124553, 0.124469,
			   0.124385, 0.124302, 0.124219, 0.124137, 0.124055, 0.123974,
			   0.123894, 0.123814, 0.123734, 0.123656, 0.123577, 0.123499,
			   0.123422, 0.123345, 0.123269, 0.123193, 0.123118, 0.123043,
			   0.122969, 0.122895, 0.122822, 0.122749, 0.122677, 0.122605,
			   0.122533, 0.122462, 0.122392, 0.122321, 0.122252, 0.122183,
			   0.122114, 0.122045, 0.121977, 0.12191, 0.121843, 0.121776,
			   0.12171, 0.121644, 0.121578, 0.121513, 0.121449, 0.121384,
			   0.12132, 0.121257, 0.121194, 0.121131, 0.121068, 0.121006,
			   0.120945, 0.120884, 0.120823, 0.120762, 0.120702, 0.120642,
			   0.120582, 0.120523, 0.120464, 0.120406, 0.120348, 0.12029,
			   0.120232, 0.120175, 0.120118, 0.120062, 0.120006, 0.11995,
			   0.119894, 0.119839, 0.119784, 0.119729, 0.119675, 0.119621,
			   0.119567, 0.119514, 0.11946, 0.119408, 0.119355, 0.119303,
			   0.119251, 0.119199, 0.119148, 0.119096, 0.119045, 0.118995,
			   0.118945, 0.118894, 0.118845, 0.118795, 0.118746, 0.118697,
			   0.118648, 0.118599, 0.118551, 0.118503, 0.118455, 0.118408,
			   0.118361, 0.118314, 0.118267, 0.11822, 0.118174, 0.118128,
			   0.118082, 0.118036, 0.117991, 0.117946, 0.117901, 0.117856,
			   0.117812, 0.117767, 0.117723, 0.11768, 0.117636, 0.117593,
			   0.11755, 0.117507, 0.117464, 0.117421, 0.117379, 0.117337,
			   0.117295, 0.117253, 0.117212, 0.11717, 0.117129, 0.117088,
			   0.117048, 0.117007, 0.116967, 0.116927, 0.116887, 0.116847,
			   0.116807, 0.116768, 0.116729, 0.11669, 0.116651, 0.116612,
			   0.116574, 0.116536, 0.116498, 0.11646, 0.116422, 0.116384,
			   0.116347, 0.11631, 0.116273, 0.116236, 0.116199, 0.116162,
			   0.116126, 0.11609, 0.116054, 0.116018, 0.115982, 0.115946,
			   0.115911, 0.115876, 0.115841, 0.115806, 0.115771, 0.115736,
			   0.115702, 0.115667, 0.115633, 0.115599, 0.115565, 0.115531,
			   0.115498, 0.115464, 0.115431, 0.115398, 0.115365, 0.115332,
			   0.115299, 0.115267, 0.115234, 0.115202, 0.11517, 0.115138,
			   0.115106, 0.115074, 0.115042, 0.115011, 0.114979, 0.114948,
			   0.114917, 0.114886, 0.114855, 0.114824, 0.114794, 0.114763,
			   0.114733, 0.114703, 0.114673, 0.114643, 0.114613, 0.114583,
			   0.114553, 0.114524, 0.114495, 0.114465, 0.114436, 0.114407,
			   0.114378, 0.114349, 0.114321, 0.114292, 0.114264, 0.114236,
			   0.114207, 0.114179, 0.114151, 0.114123, 0.114096, 0.114068,
			   0.11404, 0.114013, 0.113986, 0.113958, 0.113931, 0.113904,
			   0.113877, 0.11385, 0.113824, 0.113797, 0.113771, 0.113744,
			   0.113718, 0.113692, 0.113666, 0.11364, 0.113614, 0.113588,
			   0.113562, 0.113537, 0.113511, 0.113486, 0.11346, 0.113435,
			   0.11341, 0.113385, 0.11336, 0.113335, 0.113311, 0.113286,
			   0.113261, 0.113237, 0.113213, 0.113188, 0.113164, 0.11314,
			   0.113116, 0.113092, 0.113068, 0.113044, 0.113021, 0.112997,
			   0.112974, 0.11295, 0.112927, 0.112904, 0.11288, 0.112857,
			   0.112834, 0.112811, 0.112789, 0.112766, 0.112743, 0.11272,
			   0.112698, 0.112676, 0.112653, 0.112631, 0.112609, 0.112587,
			   0.112565, 0.112543, 0.112521, 0.112499, 0.112477, 0.112455,
			   0.112434, 0.112412, 0.112391, 0.11237, 0.112348, 0.112327,
			   0.112306, 0.112285, 0.112264, 0.112243, 0.112222, 0.112201,
			   0.112181, 0.11216, 0.112139, 0.112119, 0.112098, 0.112078,
			   0.112058, 0.112038, 0.112017, 0.111997, 0.111977, 0.111957,
			   0.111938, 0.111918, 0.111898, 0.111878, 0.111859, 0.111839,
			   0.11182, 0.1118, 0.111781, 0.111761, 0.111742, 0.111723,
			   0.111704, 0.111685, 0.111666, 0.111647, 0.111628, 0.111609,
			   0.111591, 0.111572, 0.111553, 0.111535, 0.111516, 0.111498,
			   0.111479, 0.111461, 0.111443, 0.111425, 0.111406, 0.111388,
			   0.11137, 0.111352, 0.111334, 0.111316, 0.111299, 0.111281,
			   0.111263, 0.111246, 0.111228, 0.11121, 0.111193, 0.111176,
			   0.111158, 0.111141, 0.111124, 0.111106, 0.111089, 0.111072,
			   0.111055, 0.111038, 0.111021, 0.111004, 0.110987, 0.110971,
			   0.110954, 0.110937, 0.110921, 0.110904, 0.110887, 0.110871,
			   0.110855, 0.110838, 0.110822, 0.110806, 0.110789, 0.110773,
			   0.110757, 0.110741, 0.110725, 0.110709, 0.110693, 0.110677,
			   0.110661, 0.110645, 0.11063, 0.110614, 0.110598, 0.110583,
			   0.110567, 0.110552, 0.110536, 0.110521, 0.110505, 0.11049,
			   0.110475, 0.110459, 0.110444, 0.110429, 0.110414, 0.110399,
			   0.110384, 0.110369, 0.110354, 0.110339, 0.110324, 0.110309,
			   0.110294, 0.11028, 0.110265, 0.11025, 0.110236, 0.110221,
			   0.110207, 0.110192, 0.110178, 0.110163, 0.110149, 0.110135,
			   0.11012, 0.110106, 0.110092, 0.110078, 0.110064, 0.11005,
			   0.110036, 0.110022, 0.110008, 0.109994, 0.10998, 0.109966,
			   0.109952, 0.109938, 0.109925, 0.109911, 0.109897, 0.109884,
			   0.10987, 0.109857, 0.109843, 0.10983, 0.109816, 0.109803,
			   0.109789, 0.109776, 0.109763, 0.10975, 0.109736, 0.109723,
			   0.10971, 0.109697, 0.109684, 0.109671, 0.109658, 0.109645,
			   0.109632, 0.109619, 0.109606, 0.109593, 0.109581, 0.109568,
			   0.109555, 0.109542, 0.10953, 0.109517, 0.109505, 0.109492,
			   0.109479, 0.109467, 0.109454, 0.109442, 0.10943, 0.109417,
			   0.109405, 0.109393, 0.10938, 0.109368, 0.109356, 0.109344,
			   0.109332, 0.10932, 0.109308, 0.109296, 0.109283, 0.109272,
			   0.10926, 0.109248, 0.109236, 0.109224, 0.109212, 0.1092,
			   0.109189, 0.109177, 0.109165, 0.109153, 0.109142, 0.10913,
			   0.109119, 0.109107, 0.109095, 0.109084, 0.109073, 0.109061,
			   0.10905, 0.109038, 0.109027, 0.109016, 0.109004, 0.108993,
			   0.108982, 0.108971, 0.108959, 0.108948, 0.108937, 0.108926,
			   0.108915, 0.108904, 0.108893, 0.108882, 0.108871, 0.10886,
			   0.108849, 0.108838, 0.108827, 0.108817, 0.108806, 0.108795,
			   0.108784, 0.108773, 0.108763, 0.108752, 0.108741, 0.108731,
			   0.10872, 0.10871, 0.108699, 0.108689, 0.108678, 0.108668,
			   0.108657, 0.108647, 0.108636, 0.108626, 0.108616, 0.108605,
			   0.108595, 0.108585, 0.108575, 0.108564, 0.108554, 0.108544,
			   0.108534, 0.108524, 0.108514, 0.108504, 0.108494, 0.108484,
			   0.108474, 0.108464, 0.108454, 0.108444, 0.108434, 0.108424,
			   0.108414, 0.108404, 0.108394, 0.108385, 0.108375, 0.108365,
			   0.108355, 0.108346, 0.108336, 0.108326, 0.108317, 0.108307,
			   0.108297, 0.108288, 0.108278, 0.108269, 0.108259, 0.10825,
			   0.10824, 0.108231, 0.108222, 0.108212, 0.108203, 0.108193,
			   0.108184, 0.108175, 0.108166, 0.108156, 0.108147, 0.108138,
			   0.108129, 0.108119, 0.10811, 0.108101, 0.108092, 0.108083,
			   0.108074, 0.108065, 0.108056, 0.108047, 0.108038, 0.108029,
			   0.10802, 0.108011, 0.108002, 0.107993, 0.107984, 0.107975,
			   0.107966, 0.107958, 0.107949, 0.10794, 0.107931, 0.107923,
			   0.107914, 0.107905, 0.107896, 0.107888, 0.107879, 0.107871,
			   0.107862, 0.107853, 0.107845, 0.107836, 0.107828, 0.107819,
			   0.107811, 0.107802, 0.107794, 0.107785, 0.107777, 0.107768,
			   0.10776, 0.107752, 0.107743, 0.107735, 0.107727, 0.107718,
			   0.10771, 0.107702, 0.107694, 0.107685, 0.107677, 0.107669,
			   0.107661, 0.107653, 0.107645, 0.107636, 0.107628, 0.10762,
			   0.107612, 0.107604, 0.107596, 0.107588, 0.10758, 0.107572,
			   0.107564, 0.107556, 0.107548, 0.10754, 0.107532, 0.107525,
			   0.107517, 0.107509, 0.107501, 0.107493, 0.107485, 0.107478,
			   0.10747, 0.107462, 0.107454, 0.107447, 0.107439, 0.107431,
			   0.107424, 0.107416, 0.107408, 0.107401, 0.107393, 0.107385,
			   0.107378, 0.10737, 0.107363, 0.107355, 0.107348, 0.10734,
			   0.107333, 0.107325, 0.107318, 0.10731, 0.107303, 0.107296,
			   0.107288, 0.107281, 0.107273, 0.107266, 0.107259, 0.107251,
			   0.107244, 0.107237, 0.10723, 0.107222, 0.107215, 0.107208,
			   0.107201, 0.107193, 0.107186, 0.107179, 0.107172, 0.107165,
			   0.107158, 0.10715, 0.107143, 0.107136, 0.107129, 0.107122,
			   0.107115, 0.107108, 0.107101, 0.107094, 0.107087, 0.10708,
			   0.107073, 0.107066, 0.107059, 0.107052, 0.107045, 0.107039,
			   0.107032, 0.107025, 0.107018, 0.107011, 0.107004, 0.106997,
			   0.106991, 0.106984, 0.106977, 0.10697, 0.10697};
	return rms_vector;
}

vector<float> charge_resolution_goal_vector() {
	vector<float> rms_vector =
			  {1.80171, 1.06035, 0.799549, 0.662131, 0.57553, 0.515106, 0.470089,
			   0.434981, 0.406666, 0.383232, 0.363442, 0.346451, 0.331664, 0.31865,
			   0.307084, 0.296719, 0.287363, 0.278865, 0.271102, 0.263976,
			   0.257405, 0.251322, 0.245669, 0.240399, 0.235472, 0.230851,
			   0.226507, 0.222414, 0.218548, 0.21489, 0.211423, 0.208129, 0.204996,
			   0.202012, 0.199164, 0.196442, 0.193839, 0.191346, 0.188955, 0.18666,
			   0.184454, 0.182332, 0.180289, 0.178321, 0.176422, 0.17459, 0.172819,
			   0.171108, 0.169452, 0.167849, 0.166297, 0.164792, 0.163332,
			   0.161916, 0.160541, 0.159205, 0.157906, 0.156643, 0.155415,
			   0.154219, 0.153054, 0.151919, 0.150814, 0.149735, 0.148683,
			   0.147657, 0.146655, 0.145677, 0.144721, 0.143788, 0.142875,
			   0.141982, 0.14111, 0.140255, 0.13942, 0.138601, 0.1378, 0.137015,
			   0.136247, 0.135493, 0.134755, 0.13403, 0.13332, 0.132624, 0.13194,
			   0.13127, 0.130611, 0.129965, 0.12933, 0.128707, 0.128095, 0.127493,
			   0.126902, 0.126321, 0.125749, 0.125188, 0.124635, 0.124092,
			   0.123557, 0.123031, 0.122514, 0.122004, 0.121503, 0.121009,
			   0.120523, 0.120045, 0.119573, 0.119109, 0.118651, 0.118201,
			   0.117756, 0.117319, 0.116887, 0.116462, 0.116042, 0.115628,
			   0.115221, 0.114818, 0.114421, 0.11403, 0.113644, 0.113263, 0.112886,
			   0.112515, 0.112149, 0.111787, 0.11143, 0.111078, 0.11073, 0.110386,
			   0.110046, 0.109711, 0.10938, 0.109053, 0.10873, 0.10841, 0.108095,
			   0.107783, 0.107475, 0.10717, 0.106869, 0.106571, 0.106277, 0.105986,
			   0.105698, 0.105414, 0.105133, 0.104855, 0.104579, 0.104307,
			   0.104038, 0.103772, 0.103508, 0.103248, 0.10299, 0.102735, 0.102482,
			   0.102232, 0.101985, 0.10174, 0.101498, 0.101258, 0.101021, 0.100786,
			   0.100553, 0.100322, 0.100094, 0.0998682, 0.0996445, 0.0994229,
			   0.0992035, 0.0989861, 0.0987708, 0.0985576, 0.0983463, 0.098137,
			   0.0979297, 0.0977243, 0.0975208, 0.0973191, 0.0971193, 0.0969213,
			   0.0967251, 0.0965306, 0.0963379, 0.0961468, 0.0959575, 0.0957698,
			   0.0955838, 0.0953994, 0.0952165, 0.0950353, 0.0948556, 0.0946774,
			   0.0945008, 0.0943256, 0.0941519, 0.0939797, 0.0938089, 0.0936395,
			   0.0934715, 0.0933049, 0.0931396, 0.0929757, 0.0928131, 0.0926519,
			   0.0924919, 0.0923332, 0.0921757, 0.0920195, 0.0918646, 0.0917108,
			   0.0915583, 0.0914069, 0.0912567, 0.0911076, 0.0909597, 0.090813,
			   0.0906673, 0.0905228, 0.0903793, 0.0902369, 0.0900956, 0.0899553,
			   0.0898161, 0.0896779, 0.0895407, 0.0894045, 0.0892693, 0.0891351,
			   0.0890019, 0.0888696, 0.0887383, 0.0886079, 0.0884784, 0.0883499,
			   0.0882222, 0.0880955, 0.0879696, 0.0878447, 0.0877206, 0.0875973,
			   0.0874749, 0.0873533, 0.0872326, 0.0871127, 0.0869936, 0.0868753,
			   0.0867578, 0.0866411, 0.0865252, 0.08641, 0.0862957, 0.086182,
			   0.0860692, 0.085957, 0.0858456, 0.0857349, 0.085625, 0.0855157,
			   0.0854072, 0.0852993, 0.0851921, 0.0850857, 0.0849799, 0.0848747,
			   0.0847703, 0.0846665, 0.0845633, 0.0844608, 0.0843589, 0.0842577,
			   0.084157, 0.084057, 0.0839576, 0.0838589, 0.0837607, 0.0836631,
			   0.0835661, 0.0834697, 0.0833739, 0.0832786, 0.0831839, 0.0830898,
			   0.0829963, 0.0829033, 0.0828108, 0.0827189, 0.0826275, 0.0825367,
			   0.0824464, 0.0823566, 0.0822673, 0.0821785, 0.0820903, 0.0820026,
			   0.0819153, 0.0818286, 0.0817423, 0.0816566, 0.0815713, 0.0814865,
			   0.0814021, 0.0813183, 0.0812349, 0.081152, 0.0810695, 0.0809875,
			   0.0809059, 0.0808248, 0.0807442, 0.0806639, 0.0805841, 0.0805048,
			   0.0804259, 0.0803474, 0.0802693, 0.0801916, 0.0801144, 0.0800375,
			   0.0799611, 0.0798851, 0.0798094, 0.0797342, 0.0796594, 0.0795849,
			   0.0795109, 0.0794372, 0.0793639, 0.079291, 0.0792185, 0.0791463,
			   0.0790745, 0.0790031, 0.0789321, 0.0788614, 0.078791, 0.0787211,
			   0.0786514, 0.0785822, 0.0785132, 0.0784447, 0.0783764, 0.0783085,
			   0.078241, 0.0781737, 0.0781068, 0.0780403, 0.077974, 0.0779081,
			   0.0778425, 0.0777772, 0.0777123, 0.0776476, 0.0775833, 0.0775193,
			   0.0774556, 0.0773922, 0.0773291, 0.0772663, 0.0772037, 0.0771415,
			   0.0770796, 0.077018, 0.0769567, 0.0768956, 0.0768349, 0.0767744,
			   0.0767142, 0.0766543, 0.0765947, 0.0765353, 0.0764762, 0.0764174,
			   0.0763589, 0.0763006, 0.0762426, 0.0761849, 0.0761274, 0.0760702,
			   0.0760132, 0.0759565, 0.0759, 0.0758439, 0.0757879, 0.0757322,
			   0.0756768, 0.0756216, 0.0755666, 0.0755119, 0.0754574, 0.0754032,
			   0.0753492, 0.0752955, 0.075242, 0.0751887, 0.0751356, 0.0750828,
			   0.0750302, 0.0749778, 0.0749257, 0.0748738, 0.0748221, 0.0747706,
			   0.0747194, 0.0746683, 0.0746175, 0.0745669, 0.0745166, 0.0744664,
			   0.0744164, 0.0743667, 0.0743171, 0.0742678, 0.0742187, 0.0741697,
			   0.074121, 0.0740725, 0.0740242, 0.0739761, 0.0739282, 0.0738804,
			   0.0738329, 0.0737856, 0.0737384, 0.0736915, 0.0736447, 0.0735982,
			   0.0735518, 0.0735056, 0.0734596, 0.0734138, 0.0733682, 0.0733227,
			   0.0732774, 0.0732324, 0.0731874, 0.0731427, 0.0730982, 0.0730538,
			   0.0730096, 0.0729656, 0.0729217, 0.072878, 0.0728345, 0.0727912,
			   0.072748, 0.072705, 0.0726622, 0.0726195, 0.072577, 0.0725346,
			   0.0724925, 0.0724504, 0.0724086, 0.0723669, 0.0723254, 0.072284,
			   0.0722428, 0.0722017, 0.0721608, 0.07212, 0.0720794, 0.072039,
			   0.0719987, 0.0719585, 0.0719185, 0.0718787, 0.071839, 0.0717995,
			   0.0717601, 0.0717208, 0.0716817, 0.0716427, 0.0716039, 0.0715652,
			   0.0715267, 0.0714883, 0.07145, 0.0714119, 0.0713739, 0.0713361,
			   0.0712984, 0.0712608, 0.0712234, 0.0711861, 0.0711489, 0.0711119,
			   0.071075, 0.0710383, 0.0710016, 0.0709651, 0.0709288, 0.0708925,
			   0.0708564, 0.0708204, 0.0707846, 0.0707488, 0.0707132, 0.0706777,
			   0.0706424, 0.0706071, 0.070572, 0.070537, 0.0705022, 0.0704674,
			   0.0704328, 0.0703983, 0.0703639, 0.0703297, 0.0702955, 0.0702615,
			   0.0702276, 0.0701938, 0.0701601, 0.0701265, 0.0700931, 0.0700597,
			   0.0700265, 0.0699934, 0.0699604, 0.0699275, 0.0698947, 0.069862,
			   0.0698295, 0.069797, 0.0697647, 0.0697324, 0.0697003, 0.0696683,
			   0.0696364, 0.0696046, 0.0695729, 0.0695413, 0.0695098, 0.0694784,
			   0.0694471, 0.0694159, 0.0693848, 0.0693538, 0.0693229, 0.0692922,
			   0.0692615, 0.0692309, 0.0692004, 0.06917, 0.0691398, 0.0691096,
			   0.0690795, 0.0690495, 0.0690196, 0.0689898, 0.0689601, 0.0689305,
			   0.068901, 0.0688715, 0.0688422, 0.068813, 0.0687838, 0.0687548,
			   0.0687258, 0.0686969, 0.0686682, 0.0686395, 0.0686109, 0.0685824,
			   0.068554, 0.0685256, 0.0684974, 0.0684692, 0.0684412, 0.0684132,
			   0.0683853, 0.0683575, 0.0683298, 0.0683021, 0.0682746, 0.0682471,
			   0.0682197, 0.0681924, 0.0681652, 0.0681381, 0.068111, 0.068084,
			   0.0680572, 0.0680304, 0.0680036, 0.067977, 0.0679504, 0.0679239,
			   0.0678975, 0.0678712, 0.067845, 0.0678188, 0.0677927, 0.0677667,
			   0.0677408, 0.0677149, 0.0676891, 0.0676634, 0.0676378, 0.0676123,
			   0.0675868, 0.0675614, 0.0675361, 0.0675108, 0.0674856, 0.0674605,
			   0.0674355, 0.0674105, 0.0673856, 0.0673608, 0.0673361, 0.0673114,
			   0.0672868, 0.0672623, 0.0672378, 0.0672135, 0.0671891, 0.0671649,
			   0.0671407, 0.0671166, 0.0670926, 0.0670686, 0.0670447, 0.0670209,
			   0.0669971, 0.0669734, 0.0669498, 0.0669262, 0.0669027, 0.0668793,
			   0.0668559, 0.0668326, 0.0668094, 0.0667862, 0.0667631, 0.0667401,
			   0.0667171, 0.0666942, 0.0666714, 0.0666486, 0.0666259, 0.0666032,
			   0.0665806, 0.0665581, 0.0665356, 0.0665132, 0.0664909, 0.0664686,
			   0.0664464, 0.0664242, 0.0664021, 0.0663801, 0.0663581, 0.0663362,
			   0.0663143, 0.0662925, 0.0662708, 0.0662491, 0.0662275, 0.0662059,
			   0.0661844, 0.0661629, 0.0661415, 0.0661202, 0.0660989, 0.0660777,
			   0.0660566, 0.0660355, 0.0660144, 0.0659934, 0.0659725, 0.0659516,
			   0.0659308, 0.06591, 0.0658893, 0.0658686, 0.065848, 0.0658275,
			   0.065807, 0.0657865, 0.0657661, 0.0657458, 0.0657255, 0.0657053,
			   0.0656851, 0.065665, 0.0656449, 0.0656249, 0.0656049, 0.065585,
			   0.0655651, 0.0655453, 0.0655255, 0.0655058, 0.0654862, 0.0654665,
			   0.065447, 0.0654275, 0.065408, 0.0653886, 0.0653692, 0.0653499,
			   0.0653307, 0.0653115, 0.0652923, 0.0652732, 0.0652541, 0.0652351,
			   0.0652161, 0.0651972, 0.0651783, 0.0651595, 0.0651407, 0.065122,
			   0.0651033, 0.0650847, 0.0650661, 0.0650475, 0.065029, 0.0650106,
			   0.0649922, 0.0649738, 0.0649555, 0.0649372, 0.064919, 0.0649008,
			   0.0648827, 0.0648646, 0.0648465, 0.0648285, 0.0648106, 0.0647926,
			   0.0647748, 0.0647569, 0.0647392, 0.0647214, 0.0647037, 0.0646861,
			   0.0646685, 0.0646509, 0.0646334, 0.0646159, 0.0645985, 0.0645811,
			   0.0645637, 0.0645464, 0.0645291, 0.0645119, 0.0644947, 0.0644776,
			   0.0644604, 0.0644434, 0.0644264, 0.0644094, 0.0643924, 0.0643755,
			   0.0643587, 0.0643418, 0.0643251, 0.0643083, 0.0642916, 0.0642749,
			   0.0642583, 0.0642417, 0.0642252, 0.0642087, 0.0641922, 0.0641758,
			   0.0641594, 0.064143, 0.0641267, 0.0641104, 0.0640942, 0.064078,
			   0.0640618, 0.0640457, 0.0640296, 0.0640136, 0.0639976, 0.0639816,
			   0.0639656, 0.0639497, 0.0639339, 0.063918, 0.0639022, 0.0638865,
			   0.0638708, 0.0638551, 0.0638394, 0.0638238, 0.0638082, 0.0637927,
			   0.0637772, 0.0637617, 0.0637463, 0.0637309, 0.0637155, 0.0637002,
			   0.0636849, 0.0636696, 0.0636544, 0.0636392, 0.063624, 0.0636089,
			   0.0635938, 0.0635788, 0.0635637, 0.0635488, 0.0635338, 0.0635189,
			   0.063504, 0.0634891, 0.0634743, 0.0634595, 0.0634448, 0.06343,
			   0.0634153, 0.0634007, 0.0633861, 0.0633715, 0.0633569, 0.0633424,
			   0.0633279, 0.0633134, 0.063299, 0.0632846, 0.0632702, 0.0632558,
			   0.0632415, 0.0632273, 0.063213, 0.0631988, 0.0631846, 0.0631705,
			   0.0631563, 0.0631422, 0.0631282, 0.0631141, 0.0631001, 0.0630862,
			   0.0630722, 0.0630583, 0.0630444, 0.0630306, 0.0630168, 0.063003,
			   0.0629892, 0.0629755, 0.0629618, 0.0629481, 0.0629345, 0.0629208,
			   0.0629072, 0.0628937, 0.0628802, 0.0628667, 0.0628532, 0.0628397,
			   0.0628263, 0.0628129, 0.0627996, 0.0627863, 0.0627729, 0.0627597,
			   0.0627464, 0.0627332, 0.06272, 0.0627069, 0.0626937, 0.0626806,
			   0.0626675, 0.0626545, 0.0626414, 0.0626284, 0.0626155, 0.0626025,
			   0.0625896, 0.0625767, 0.0625638, 0.062551, 0.0625382, 0.0625254,
			   0.0625127, 0.0624999, 0.0624872, 0.0624745, 0.0624619, 0.0624492,
			   0.0624366, 0.0624241, 0.0624115, 0.062399, 0.0623865, 0.062374,
			   0.0623616, 0.0623491, 0.0623367, 0.0623244, 0.062312, 0.0622997,
			   0.0622874, 0.0622751, 0.0622629, 0.0622506, 0.0622384, 0.0622263,
			   0.0622141, 0.062202, 0.0621899, 0.0621778, 0.0621657, 0.0621537,
			   0.0621417, 0.0621297, 0.0621178, 0.0621058, 0.0620939, 0.062082,
			   0.0620702, 0.0620583, 0.0620465, 0.0620347, 0.062023, 0.0620112,
			   0.0619995, 0.0619878, 0.0619761, 0.0619645, 0.0619528, 0.0619412,
			   0.0619296, 0.0619181, 0.0619065, 0.061895, 0.0618835, 0.061872,
			   0.0618606, 0.0618492, 0.0618377, 0.0618264, 0.061815, 0.0618037,
			   0.0617923, 0.061781, 0.0617698, 0.0617585, 0.0617473, 0.0617361,
			   0.0617249, 0.0617137, 0.0617026, 0.0616915, 0.0616804, 0.0616693,
			   0.0616582, 0.0616472, 0.0616362, 0.0616252, 0.0616142, 0.0616032,
			   0.0615923, 0.0615814, 0.0615705, 0.0615596, 0.0615488, 0.0615379,
			   0.0615271, 0.0615163, 0.0615056, 0.0614948, 0.0614841, 0.0614734,
			   0.0614627, 0.061452, 0.0614414, 0.0614308, 0.0614202, 0.0614096,
			   0.061399, 0.0613884, 0.0613779, 0.0613674, 0.0613569, 0.0613464,
			   0.061336, 0.0613256, 0.0613152, 0.0613048, 0.0612944, 0.061284,
			   0.0612737, 0.0612634, 0.0612531, 0.0612428, 0.0612326, 0.0612223,
			   0.0612121, 0.0612019, 0.0612019};
	return rms_vector;
}
