//
// Created by Jason Watson on 11/09/15.
//

/*
 * Class to hold input .ox.root file. A check to see if the input file is .ox.root is performed,
 * the result of which is held in mOx. The output of the program can then be later set with
 * BuildOutput, which will use the same location as the input file by default (a directory sharing
 * the same name is created alongside the input file)
 */

#ifndef OXTOOLS_FILEPATH_H
#define OXTOOLS_FILEPATH_H

#include <initialise.h>
#include <utilities.h>
#include <Run.h>

class Filepath : public std::enable_shared_from_this<Filepath> {
	 friend class FilepathLoader;
protected:
	 Filepath(fs::path input_filepath) : mType("File")
	 {
		 Init();
		 SetInput(input_filepath);
		 mOutputDirectory = mInputDirectory / mRunIdentifier;
		 mFileSize = fs::file_size(mInput);
	 };

	 string mType;
	 fs::path mInput; // Full input filepath
	 fs::path mInputDirectory;
	 fs::path mInputName;
	 fs::path mInputStem; // File name without the extension
	 fs::path mInputExtension;
	 bool mRoot;
	 bool mOx;
	 bool mTxt;
	 string mRunIdentifier;
	 fs::path mOutputOxrootFilepath;
	 fs::path mOutputDirectory;
	 uintmax_t mFileSize;
	 Run_ptr mRun;

	 void Init();
	 void SetInput(fs::path input);
	 void SetRunIdentifier();

public:

	 GET(Input, mInput, fs::path);
	 GET(InputDirectory, mInputDirectory, fs::path);
	 GET(RunIdentifier, mRunIdentifier, string);
	 IS(Txt, mTxt);
	 IS(Root, mRoot);
	 IS(Ox, mOx);
	 virtual GET(OutputOxrootFilepath, mOutputOxrootFilepath, fs::path);
	 GET(OutputDirectory, mOutputDirectory, fs::path);

	 virtual void Print();
	 virtual Run_ptr Read() {THROW("Read is not defined for file type");}
	 virtual void CreateOutputDirectory() const;

	 // Root virtual
	 virtual TFile* GetTFile()const{THROW("File must be type Root");}
	 virtual bool IsLibCHEC()const{THROW("File must be type Root");}

	 // Libchec virtual
	 virtual TTree* GetTTree()const{THROW("File must be a recognised root type");}

	 // Oxroot virtual
	 virtual TTree* GetEventTTree()const{THROW("File must be type OxRoot");}
	 virtual TTree* GetPixelTTree()const{THROW("File must be type OxRoot");}

};

class TxtFilepath : public Filepath {
	 friend class FilepathLoader;
protected:
	 TxtFilepath(fs::path input_filepath) :
			   Filepath(input_filepath)
	 {mType = "Txt";}

public:

};

class ReadhessFilepath : public TxtFilepath {
	 friend class FilepathLoader;
protected:
	 ReadhessFilepath(fs::path input_filepath) :
			   TxtFilepath(input_filepath),
	         mEventTTree(nullptr),
	         mPixelTTree(nullptr)
	 {mType = "Readhess";}

	 TTree* mEventTTree;
	 TTree* mPixelTTree;

public:
	 virtual Run_ptr Read();
};

class RootFilepath : public Filepath {
	 friend class FilepathLoader;
protected:
	 RootFilepath(fs::path input_filepath) :
			   Filepath(input_filepath),
	         mTFile(new TFile(mInput.c_str(), "READ"))
	 {mType = "Root";}

	 TFile* mTFile;

public:
	 virtual GET(TFile, mTFile, TFile*)

	 virtual void Print();
};

class LibchecFilepath : public RootFilepath {
	 friend class FilepathLoader;
protected:
	 LibchecFilepath(fs::path input_filepath) :
			   RootFilepath(input_filepath),
			   mTTree((TTree *) mTFile->Get("camera_data"))
	 {mType = "Libchec";}

	 TTree* mTTree;

public:
	 virtual Run_ptr Read();

	 virtual GET(TTree, mTTree, TTree*);
};

class OxRootFilepath : public RootFilepath {
	 friend class FilepathLoader;
private:
protected:
	 OxRootFilepath(fs::path input_filepath) :
			   RootFilepath(input_filepath),
			   mEventTTree((TTree *) mTFile->Get("event")),
				mPixelTTree((TTree *) mTFile->Get("pixel"))
	 {mType = "OxRoot";}

	 TTree* mEventTTree;
	 TTree* mPixelTTree;

public:
	 virtual Run_ptr Read();

	 virtual GET(EventTTree, mEventTTree, TTree*);
	 virtual GET(PixelTTree, mPixelTTree, TTree*);
};


typedef std::shared_ptr<Filepath> Filepath_ptr;
typedef std::shared_ptr<TxtFilepath> TxtFile_ptr;
typedef std::shared_ptr<ReadhessFilepath> ReadhessFile_ptr;
typedef std::shared_ptr<RootFilepath> RootFile_ptr;
typedef std::shared_ptr<LibchecFilepath> LibchecFile_ptr;
typedef std::shared_ptr<OxRootFilepath> OxrootFile_ptr;

class FilepathLoader {
public:
	 static Filepath_ptr Load(fs::path input_filepath);
};

#endif //OXTOOLS_FILEPATH_H
