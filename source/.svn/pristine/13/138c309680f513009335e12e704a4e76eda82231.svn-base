//
// Created by Jason Watson on 04/11/15.
//

/* UNFINISHED
 * Subclass of the Event class. Calculates and holds the hillas parameters for an event.
 */

#ifndef OXTOOLS_HILLASPARAMETER_H
#define OXTOOLS_HILLASPARAMETER_H

#include <initialise.h>
#include "Filepath.h"
//this needs to be incorporated into the class hillas

//class Event;

class c_TTree{

public:
	void set_tree (Filepath_ptr Tfilepath);
	TFile *myfile;
	TTree *input_eventTree;
	TTree *input_pixelTree;
	Int_t entries;
	Int_t entries_e;

	//branches (pixel position, pulse height etc.)
	Float_t fPulseHeight;
	Int_t fPixelId;
	Float_t fPixelX;
	Float_t fPixelY;
	UInt_t fEvent;

	//These set bounds needed for histogram
	Float_t x_min;
	Float_t x_max;
	Float_t y_min;
	Float_t y_max;
	Float_t max_height;
	Float_t min_height;
	UInt_t max_event;
	UInt_t max_pixelID;
	UInt_t num_pixel_entries;

	//function for getting filling this

};


class ImageValues
{
public:
	vector <Float_t> xcoord, ycoord, mag_pixel, mag_pixel_all;	//mag_pixel_all includes blank spaces
	vector <int> pixel_id;
	int x_binN, y_binN, triggered_pixels, event_number;       //number of x/y bins, number of triggered pixels
	double x_max, x_min, y_max, y_min;
	TH2F* h2D_initial;
	void SetHisto();
	void GetValues(TH2F*);
	void FillVectors(Filepath_ptr Tfilepath);
};


class c_hillas {
public:
	double x, y, n;     //x and y are position, n is pixel magnitude

	double n_sum, nx_sum, nx2_sum, nx3_sum, ny_sum, ny2_sum, ny3_sum, nxy_sum, nx2y_sum, nxy2_sum;

	//image moments
	double x_m, x2_m, x3_m, y_m, y2_m, y3_m, xy_m, x2y_m, xy2_m;

	//sigmas (spreads)
	double s_x2, s_x3, s_y2, s_y3, s_xy, s_xy2, s_x2y;

	//these are the actual hillas parameters
	double d, s, u, v, w, tan_phi, phi, length, width, miss_part, miss, distance, azwidth,
			sdash_x3, asymmetry, miss_dist, alpha;
	void calculate_hillas (vector<Float_t> x_v, vector<Float_t> y_v, vector<Float_t> photon_v, int trig_pixels);
	void plot_ellipse();

};
/*
class HillasParameter {
public:
	HillasParameter();

	GETSETREF(NPixels, mNPixels, std::size_t);
	GETSETREF(Intensity, mIntensity, double);
	GETSETREF(Length, mLength, double);
	GETSETREF(Width, mWidth, double);
	GETSETREF(Phi, mPhi, double);
	GETSETREF(XCenter, mXCenter, double);
	GETSETREF(YCenter, mYCenter, double);
	GETSETREF(Azwidth, mAzwidth, double);

	void print(std::ostream& pOStream) const;

private:
	std::size_t mNPixels;  // pixels in image
	double mIntensity;      // photo electrons in imageF		//Intensity is like n_sum
	double mXCenter;
	double mYCenter;
	double mLength;        // length of ellipse
	double mWidth;         // width of ellipse
	double mPhi;          	// angle of major ellipse axis with respect to x-axis
	TEllipse mEllipse; 		//make function that sets mEllipse= newTEllipse (like in kHillas defining ellipse)
	// then function that draws ellipse that can be added to camera_image_plotter
	double mAzwidth;
//	 Coordinate mCenterOfGravity;  // center of gravity of ellipse
};


*/






#endif //OXTOOLS_HILLASPARAMETER_H
