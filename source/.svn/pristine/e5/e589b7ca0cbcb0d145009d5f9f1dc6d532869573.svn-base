//
// Created by Jason Watson on 02/11/15.
//

#ifndef OXTOOLS_RUN_H
#define OXTOOLS_RUN_H

#include <initialise.h>
#include <Camera.h>

typedef map<int, Camera> map_int_Camera_t;
typedef map<uint32_t,map<uint32_t,map<uint32_t,bool>>> map_uint32_t_uint32_t_uint32_t_bool_t;

class Run {
private:
	 static uint32_t sIdGenerator;

	 uint32_t mRunId;
	 fs::path mOxrootFilepath;
	 TFile *mRootFile;
	 TTree *mEventTTree;
	 TTree *mPixelTTree;

	 map<int,Camera> mCameraMap;
	 map<uint32_t,map<uint32_t,map<uint32_t,bool>>> mBoolEntryMap; // [camera][event][pixel]

	 uint32_t mNumCameras;
	 uint32_t mNumEventTTreeEntries;
	 uint32_t mNumPixelTTreeEntries;
	 uint32_t mMaxEventNum;
	 uint32_t mMaxPixelNum;
	 map<string,float> mBranchMapValueMax;
	 map<string,float> mBranchMapValueMin;

	 void Init();

public:
	 Run(const fs::path &input_root_filepath, const vector<string> &branch_name_vector);

	 GET(RunId, RunId, uint32_t);
	 GET(OxrootFilepath, OxrootFilepath, fs::path);
	 GET(RootFile, RootFile, TFile*);
	 GET(EventTTree, EventTTree, TTree*);
	 GET(PixelTTree, PixelTTree, TTree*);
	 GETCREF(CameraMap, CameraMap, map_int_Camera_t);
	 GETCREF(BoolEntryMap, BoolEntryMap, map_uint32_t_uint32_t_uint32_t_bool_t);
	 GET(NumCameras, NumCameras, uint32_t);
	 GET(NumEventTTreeEntries, NumEventTTreeEntries, uint32_t);
	 GET(NumPixelTTreeEntries, NumPixelTTreeEntries, uint32_t);
	 GET(MaxEventNum, MaxEventNum, uint32_t);
	 GET(MaxPixelNum, MaxPixelNum, uint32_t);
	 GETMAPCONTENT(BranchMax,BranchMapValueMax,float,string);
	 GETMAPCONTENT(BranchMin,BranchMapValueMin,float,string);

	 bool CheckEntryExists(uint32_t camera_id, uint32_t event_id, uint32_t pixel_id);
	 bool CheckEventExists(uint32_t camera_id, uint32_t event_id);
	 bool CheckCameraExists(uint32_t camera_id);
};

#endif //OXTOOLS_RUN_H
